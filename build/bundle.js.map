{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/kainos.js","../../src/stores.js","../../src/valstybes.js","../../src/miestai.js","../../src/components/TabHeader.svelte","../../src/components/PaneMokesciai.svelte","../../src/components/Page1.svelte","../../src/veiklosSritys.js","../../src/components/Page2.svelte","../../src/components/Address.svelte","../../src/components/Page3.svelte","../../src/components/Person.svelte","../../src/components/Page4.svelte","../../src/components/Page5.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.31.2' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","export default [\r\n  {KODU_SKAICIUS: 'TIK_GLN',    APYVARTA_CODE: '100', PRISIJUNGIMO: 35.0,  PALAIKYMO: 25.0 },\r\n  {KODU_SKAICIUS: 'IKI_10',     APYVARTA_CODE: '100', PRISIJUNGIMO: 55.0,  PALAIKYMO: 45.0 },\r\n  {KODU_SKAICIUS: 'IKI_1000',   APYVARTA_CODE: '100', PRISIJUNGIMO: 90.0,  PALAIKYMO: 55.0 },\r\n  {KODU_SKAICIUS: 'IKI_1000',   APYVARTA_CODE: '200', PRISIJUNGIMO: 180.0, PALAIKYMO: 110.0},\r\n  {KODU_SKAICIUS: 'IKI_1000',   APYVARTA_CODE: '300', PRISIJUNGIMO: 280.0, PALAIKYMO: 165.0},\r\n  {KODU_SKAICIUS: 'IKI_1000',   APYVARTA_CODE: '400', PRISIJUNGIMO: 380.0, PALAIKYMO: 225.0},\r\n  {KODU_SKAICIUS: 'IKI_1000',   APYVARTA_CODE: '500', PRISIJUNGIMO: 480.0, PALAIKYMO: 280.0},\r\n  {KODU_SKAICIUS: 'IKI_1000',   APYVARTA_CODE: '600', PRISIJUNGIMO: 580.0, PALAIKYMO: 340.0},\r\n  {KODU_SKAICIUS: 'IKI_1000',   APYVARTA_CODE: '700', PRISIJUNGIMO: 690.0, PALAIKYMO: 400.0},\r\n  {KODU_SKAICIUS: 'IKI_1000',   APYVARTA_CODE: '800', PRISIJUNGIMO: 800.0, PALAIKYMO: 460.0},\r\n  {KODU_SKAICIUS: 'IKI_1000',   APYVARTA_CODE: '900', PRISIJUNGIMO: 900.0, PALAIKYMO: 520.0},\r\n  {KODU_SKAICIUS: 'IKI_10000',  APYVARTA_CODE: '100', PRISIJUNGIMO: 110.0, PALAIKYMO: 55.0 },\r\n  {KODU_SKAICIUS: 'IKI_10000',  APYVARTA_CODE: '200', PRISIJUNGIMO: 220.0, PALAIKYMO: 110.0},\r\n  {KODU_SKAICIUS: 'IKI_10000',  APYVARTA_CODE: '300', PRISIJUNGIMO: 330.0, PALAIKYMO: 165.0},\r\n  {KODU_SKAICIUS: 'IKI_10000',  APYVARTA_CODE: '400', PRISIJUNGIMO: 450.0, PALAIKYMO: 225.0},\r\n  {KODU_SKAICIUS: 'IKI_10000',  APYVARTA_CODE: '500', PRISIJUNGIMO: 560.0, PALAIKYMO: 280.0},\r\n  {KODU_SKAICIUS: 'IKI_10000',  APYVARTA_CODE: '600', PRISIJUNGIMO: 680.0, PALAIKYMO: 340.0},\r\n  {KODU_SKAICIUS: 'IKI_10000',  APYVARTA_CODE: '700', PRISIJUNGIMO: 800.0, PALAIKYMO: 400.0},\r\n  {KODU_SKAICIUS: 'IKI_10000',  APYVARTA_CODE: '800', PRISIJUNGIMO: 920.0, PALAIKYMO: 460.0},\r\n  {KODU_SKAICIUS: 'IKI_10000',  APYVARTA_CODE: '900', PRISIJUNGIMO: 1040.0,PALAIKYMO: 520.0},\r\n  {KODU_SKAICIUS: 'IKI_100000', APYVARTA_CODE: '100', PRISIJUNGIMO: 140.0, PALAIKYMO: 55.0 },\r\n  {KODU_SKAICIUS: 'IKI_100000', APYVARTA_CODE: '200', PRISIJUNGIMO: 260.0, PALAIKYMO: 110.0},\r\n  {KODU_SKAICIUS: 'IKI_100000', APYVARTA_CODE: '300', PRISIJUNGIMO: 400.0, PALAIKYMO: 165.0},\r\n  {KODU_SKAICIUS: 'IKI_100000', APYVARTA_CODE: '400', PRISIJUNGIMO: 540.0, PALAIKYMO: 225.0},\r\n  {KODU_SKAICIUS: 'IKI_100000', APYVARTA_CODE: '500', PRISIJUNGIMO: 680.0, PALAIKYMO: 280.0},\r\n  {KODU_SKAICIUS: 'IKI_100000', APYVARTA_CODE: '600', PRISIJUNGIMO: 820.0, PALAIKYMO: 340.0},\r\n  {KODU_SKAICIUS: 'IKI_100000', APYVARTA_CODE: '700', PRISIJUNGIMO: 960.0, PALAIKYMO: 400.0},\r\n  {KODU_SKAICIUS: 'IKI_100000', APYVARTA_CODE: '800', PRISIJUNGIMO: 1100.0,PALAIKYMO: 460.0},\r\n  {KODU_SKAICIUS: 'IKI_100000', APYVARTA_CODE: '900', PRISIJUNGIMO: 1250.0,PALAIKYMO: 520.0},\r\n];\r\n","import { writable } from 'svelte/store';\r\nimport kainos from './kainos'\r\n\r\nexport const ValidPages = writable({\r\n  isValidPage1: false,\r\n  isValidPage2: false,\r\n  isValidPage3: false,\r\n  isValidPage4: false,\r\n})\r\n\r\nexport const Paraiska = writable({\r\n  paslauga: 'PILNAS_SPEKTRAS',\r\n  reikalingas_kodu_skaicius: '',\r\n  apyvarta: '',\r\n  pareiskejo_tipas: 'IMONE',\r\n  imones_tipas: '',\r\n  pavadinimas: '',\r\n  asmens_vardas: '',\r\n  asmens_pavarde: '',\r\n  asmens_kodas: '',\r\n  veiklos_sritys: [],\r\n  kitos_veiklos_sritys: '',\r\n  is_med_prekes: '',\r\n  is_med_prekes_jav: '',\r\n  imones_kodas: '',\r\n  pvm_kodas: '',\r\n  telefonas: '',\r\n  email: '',\r\n  www: '',\r\n  banko_saskaita: '',\r\n  banko_kodas: '',\r\n  bankas: '',\r\n  email_saskaitoms: '',\r\n\r\n  adresas_reg: {\r\n    valstybe: 'LT',\r\n    adresas1: '',\r\n    adresas2: '',\r\n    adresas3: '',\r\n    adresas4: '',\r\n    miestas: null,\r\n    pasto_kodas: '',\r\n  },\r\n  is_adresas_vienas: true,\r\n  adresas_kor: {\r\n    valstybe: 'LT',\r\n    adresas1: '',\r\n    adresas2: '',\r\n    adresas3: '',\r\n    adresas4: '',\r\n    miestas: null,\r\n    pasto_kodas: '',\r\n  },\r\n\r\n  vadovas: {\r\n    vardas: '',\r\n    pavarde: '',\r\n    pareigos: '',\r\n    telefonas: '',\r\n    email: '',\r\n  },\r\n  is_vadovas_atsakingas: false,\r\n  atsakingas_asmuo: {\r\n    vardas: '',\r\n    pavarde: '',\r\n    pareigos: '',\r\n    telefonas: '',\r\n    email: '',\r\n  },\r\n\r\n  is_patvirtinta: false,\r\n  mokesciai: {\r\n    prisijungimo: 0,\r\n    prisijungimo_pvm: 0,\r\n    palaikymo: 0,\r\n    palaikymo_pvm: 0,\r\n  },\r\n});\r\n\r\nexport const ParaiskaErrors = writable({\r\n  paslauga: '',\r\n  reikalingas_kodu_skaicius: '',\r\n  apyvarta: '',\r\n  pareiskejo_tipas: '',\r\n  imones_tipas: '',\r\n  pavadinimas: '',\r\n  asmens_vardas: '',\r\n  asmens_pavarde: '',\r\n  asmens_kodas: '',\r\n  veiklos_sritys: '',\r\n  kitos_veiklos_sritys: '',\r\n  is_med_prekes: '',\r\n  is_med_prekes_jav: '',\r\n  imones_kodas: '',\r\n  pvm_kodas: '',\r\n  telefonas: '',\r\n  email: '',\r\n  www: '',\r\n  banko_saskaita: '',\r\n  banko_kodas: '',\r\n  bankas: '',\r\n  email_saskaitoms: '',\r\n\r\n  adresas_reg: {\r\n    valstybe: '',\r\n    adresas1: '',\r\n    adresas2: '',\r\n    adresas3: '',\r\n    adresas4: '',\r\n    miestas: '',\r\n    pasto_kodas: '',\r\n  },\r\n  is_adresas_vienas: false,\r\n  adresas_kor: {\r\n    valstybe: '',\r\n    adresas1: '',\r\n    adresas2: '',\r\n    adresas3: '',\r\n    adresas4: '',\r\n    miestas: '',\r\n    pasto_kodas: '',\r\n  },\r\n\r\n  vadovas: {\r\n    vardas: '',\r\n    pavarde: '',\r\n    pareigos: '',\r\n    telefonas: '',\r\n    email: '',\r\n  },\r\n  atsakingas_asmuo: {\r\n    vardas: '',\r\n    pavarde: '',\r\n    pareigos: '',\r\n    telefonas: '',\r\n    email: '',\r\n  },\r\n\r\n});\r\n\r\nconst ParaiskaDTO = {\r\n  _entityName: \"gs1nz_NaudotojoParaiska\",\r\n  paslauga: \"PILNAS_SPEKTRAS\",\r\n    apyvarta: {\r\n        _entityName: \"gs1nz_Apyvarta\",\r\n        id: \"\"\r\n    },\r\n    reikalingasKoduSkaicius: \"\",\r\n    asmuoImone: \"IMONE\",\r\n    imonesTipas: {\r\n        _entityName: \"gs1nz_ImonesTipas\",\r\n        id: \"\"\r\n    },\r\n    imonesPavadinimas: \"\",\r\n    asmensVardas: \"\",\r\n    asmensPavarde: \"\",\r\n    asmensKodas: \"\",\r\n    veiklosSritysKodai: \"\",\r\n    kitosVeiklosSritys: \"\",\r\n    isMedPrekes: false,\r\n    imonesKodas: \"\",\r\n    pvmKodas: \"\",\r\n    telefonas: \"\",\r\n    email: \"\",\r\n    www: \"\",\r\n    bankoSaskaita: \"\",\r\n    bankoKodas: \"\",\r\n    bankas: \"\",\r\n    emailSaskaitoms: \"\",\r\n    adrRegLine1: \"\",\r\n    adrRegLine2: \"\",\r\n    adrRegLine3: \"\",\r\n    adrRegLine4: \"\",\r\n    adrRegPastoKodas: \"\",\r\n    adrRegMiestas: null,\r\n    adrRegValstybe: null,\r\n    isAdresasVienas: false,\r\n    adrKorLine1: \"\",\r\n    adrKorLine2: \"\",\r\n    adrKorLine3: \"\",\r\n    adrKorLine4: \"\",\r\n    adrKorPastoKodas: \"\",\r\n    adrKorMiestas: null,\r\n    adrKorValstybe: null,\r\n    vadovasVardas: \"\",\r\n    vadovasPavarde: \"\",\r\n    vadovasPareigos: \"\",\r\n    vadovasTelefonas: \"\",\r\n    vadovasEmail: \"\",\r\n    isVadovasAtsakingas: false,\r\n    atsAsmuoVardas: \"\",\r\n    atsAsmuoPavarde: \"\",\r\n    atsAsmuoPareigos: \"\",\r\n    atsAsmuoTelefonas: \"\",\r\n    atsAsmuoEmail: \"\",\r\n    paraiskosBusena: \"\",\r\n        \r\n};\r\n\r\nconst shortEntityDTO = {\r\n  _entityName: '',\r\n  id: ''\r\n}\r\n\r\nconst AdresasDTO = {\r\n  _entityName: 'gs1nz_Adresas',\r\n  adresoTipas: '',\r\n  valstybe: {\r\n    _entityName: 'gs1nz_Iso3166',\r\n    id: '',\r\n  },\r\n  line1: '',\r\n  line2: '',\r\n  line3: '',\r\n  line4: '',\r\n  miestas: {\r\n    _entityName: 'gs1nz_VakMiestas',\r\n    id: '',\r\n  },\r\n};\r\n\r\nconst AsmuoDTO = {\r\n  _entityName: 'gs1nz_AtsakingasAsmuo',\r\n  isVadovas: false,\r\n  vardas: '',\r\n  pavarde: '',\r\n  pareigos: '',\r\n  telefonas: '',\r\n  email: '',\r\n};\r\n\r\nexport function calculateFees(paraiska){\r\n  let koduSkaicius = paraiska.reikalingas_kodu_skaicius\r\n  let apyvarta = paraiska.apyvarta\r\n  if(paraiska.paslauga === 'TIK_GLN'){\r\n    koduSkaicius = 'TIK_GLN'\r\n    apyvarta = '100'    \r\n  }\r\n  if(paraiska.paslauga === 'IKI_DESIMT_KODU'){\r\n    koduSkaicius = 'IKI_10'\r\n    apyvarta = '100'    \r\n  }\r\n  //let ix = kainos.indexOf(e => (e.KODU_SKAICIUS === koduSkaicius && e.APYVARTA_CODE === apyvarta))\r\n  //if (ix > -1){\r\n  let x = kainos.find(e => (e.KODU_SKAICIUS === koduSkaicius && e.APYVARTA_CODE === apyvarta))  \r\n  if(x){\r\n    paraiska.mokesciai.prisijungimo = x.PRISIJUNGIMO\r\n    paraiska.mokesciai.prisijungimo_pvm = Math.round(x.PRISIJUNGIMO * 100 * 0.21)/100\r\n    paraiska.mokesciai.palaikymo = x.PALAIKYMO\r\n    paraiska.mokesciai.palaikymo_pvm = Math.round(x.PALAIKYMO * 100 * 0.21)/100\r\n  } else {\r\n    paraiska.mokesciai.prisijungimo = 0\r\n    paraiska.mokesciai.prisijungimo_pvm = 0\r\n    paraiska.mokesciai.palaikymo = 0\r\n    paraiska.mokesciai.palaikymo_pvm = 0\r\n  }\r\n}\r\n\r\nfunction fillDto(paraiska) {\r\n  ParaiskaDTO.paslauga = paraiska.paslauga;\r\n  ParaiskaDTO.reikalingasKoduSkaicius = paraiska.reikalingas_kodu_skaicius;\r\n  if (paraiska.paslauga === 'PILNAS_SPEKTRAS') {\r\n    ParaiskaDTO.apyvarta.id = paraiska.apyvarta;\r\n  }\r\n  ParaiskaDTO.asmuoImone = paraiska.pareiskejo_tipas;\r\n  if (paraiska.pareiskejo_tipas === 'IMONE') {\r\n    ParaiskaDTO.imonesTipas.id = paraiska.imones_tipas;\r\n    ParaiskaDTO.imonesPavadinimas = paraiska.pavadinimas;\r\n    ParaiskaDTO.imonesKodas = paraiska.imones_kodas;\r\n  } else {\r\n    ParaiskaDTO.asmensVardas = paraiska.asmens_vardas;\r\n    ParaiskaDTO.asmensPavarde = paraiska.asmens_pavarde;\r\n    ParaiskaDTO.asmensKodas = paraiska.asmens_kodas;\r\n  }\r\n  ParaiskaDTO.veiklosSritys = paraiska.veiklos_sritys.toString();\r\n  if (paraiska.veiklos_sritys.includes('999')) {\r\n    ParaiskaDTO.kitosVeiklosSritys = paraiska.kitos_veiklos_sritys;\r\n  }\r\n  ParaiskaDTO.isMedPrekes = paraiska.is_med_prekes;\r\n  ParaiskaDTO.pvmKodas = paraiska.pvm_kodas;\r\n  ParaiskaDTO.telefonas = paraiska.telefonas;\r\n  ParaiskaDTO.email = paraiska.email;\r\n  ParaiskaDTO.www = paraiska.www;\r\n  ParaiskaDTO.bankoSaskaita = paraiska.banko_saskaita;\r\n  ParaiskaDTO.bankoKodas = paraiska.banko_kodas;\r\n  ParaiskaDTO.bankas = paraiska.bankas;\r\n  ParaiskaDTO.emailSaskaitoms = paraiska.email_saskaitoms;\r\n  // adresai\r\n  ParaiskaDTO.adrRegValstybe = Object.create(shortEntityDTO);\r\n  ParaiskaDTO.adrRegValstybe._entityName = \"gs1nz_Valstybe\";\r\n  ParaiskaDTO.adrRegValstybe.id = paraiska.adresas_reg.valstybe;\r\n  ParaiskaDTO.adrRegLine1 = paraiska.adresas_reg.adresas1;\r\n  ParaiskaDTO.adrRegLine2 = paraiska.adresas_reg.adresas2;\r\n  ParaiskaDTO.adrRegLine3 = paraiska.adresas_reg.adresas3;\r\n  ParaiskaDTO.adrRegLine4 = paraiska.adresas_reg.adresas4;\r\n\r\n  if (paraiska.adresas_reg.valstybe === 'LT') {\r\n    ParaiskaDTO.adrRegMiestas = Object.create(shortEntityDTO);\r\n    ParaiskaDTO.adrRegMiestas._entityName = \"gs1nz_Miestas\";\r\n    ParaiskaDTO.adrRegMiestas.id = paraiska.adresas_reg.miestas;\r\n    ParaiskaDTO.adrRegPastoKodas = 'LT-' + paraiska.adresas_reg.pasto_kodas;\r\n  } else {\r\n    ParaiskaDTO.adrRegMiestas = null;\r\n    ParaiskaDTO.adrRegPastoKodas = paraiska.adresas_reg.pasto_kodas;\r\n  }\r\n\r\n  ParaiskaDTO.isAdresasVienas = paraiska.is_adresas_vienas;\r\n  if (!paraiska.is_adresas_vienas) {\r\n    ParaiskaDTO.adrKorValstybe = Object.create(shortEntityDTO);\r\n    ParaiskaDTO.adrKorValstybe._entityName = \"gs1nz_Valstybe\";\r\n    ParaiskaDTO.adrKorValstybe.id = paraiska.adresas_kor.valstybe;\r\n    ParaiskaDTO.adrKorLine1 = paraiska.adresas_kor.adresas1;\r\n    ParaiskaDTO.adrKorLine2 = paraiska.adresas_kor.adresas2;\r\n    ParaiskaDTO.adrKorLine3 = paraiska.adresas_kor.adresas3;\r\n    ParaiskaDTO.adrKorLine4 = paraiska.adresas_kor.adresas4;\r\n\r\n    if (paraiska.adresas_kor.valstybe === 'LT') {\r\n      ParaiskaDTO.adrKorMiestas = Object.create(shortEntityDTO);\r\n      ParaiskaDTO.adrKorMiestas._entityName = \"gs1nz_Miestas\";\r\n      ParaiskaDTO.adrKorMiestas.id = paraiska.adresas_kor.miestas;\r\n      ParaiskaDTO.adrKorPastoKodas = 'LT-' + paraiska.adresas_kor.pasto_kodas;\r\n    } else {\r\n      ParaiskaDTO.adrKorMiestas = null;\r\n      ParaiskaDTO.adrKorPastoKodas = paraiska.adresas_kor.pasto_kodas;\r\n    }\r\n  }\r\n\r\n  // asmenys\r\n  if (paraiska.pareiskejo_tipas === 'IMONE') {\r\n    // vadovas\r\n    ParaiskaDTO.vadovasVardas = paraiska.vadovas.vardas;\r\n    ParaiskaDTO.vadovasPavarde = paraiska.vadovas.pavarde;\r\n    ParaiskaDTO.vadovasPareigos = paraiska.vadovas.pareigos;\r\n    ParaiskaDTO.vadovasTelefonas = paraiska.vadovas.telefonas;\r\n    ParaiskaDTO.vadovasEmail = paraiska.vadovas.email;\r\n    ParaiskaDTO.isVadovasAtsakingas = paraiska.is_vadovas_atsakingas;\r\n\r\n    // atsakingas asmuo\r\n    ParaiskaDTO.atsAsmuoVardas = paraiska.atsakingas_asmuo.vardas;\r\n    ParaiskaDTO.atsAsmuoPavarde = paraiska.atsakingas_asmuo.pavarde;\r\n    ParaiskaDTO.atsAsmuoPareigos = paraiska.atsakingas_asmuo.pareigos;\r\n    ParaiskaDTO.atsAsmuoTelefonas = paraiska.atsakingas_asmuo.telefonas;\r\n    ParaiskaDTO.atsAsmuoEmail = paraiska.atsakingas_asmuo.email;\r\n  }\r\n  if(paraiska.is_patvirtinta){\r\n    ParaiskaDTO.paraiskosBusena = 'PARUOSTA'\r\n  } else{\r\n    ParaiskaDTO.paraiskosBusena = 'RUOSIAMA'\r\n  }\r\n}\r\n\r\nexport function persistParaiska(paraiska, errLst) {\r\n  const myHeaders = new Headers();\r\n  myHeaders.append('Content-Type', 'application/json');\r\n\r\n  fillDto(paraiska);\r\n  const raw = JSON.stringify(ParaiskaDTO);\r\n\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: myHeaders,\r\n    body: raw,\r\n    redirect: 'follow',\r\n  };\r\n\r\n  fetch(\r\n    'http://localhost:8080/gs1nzx/rest/v2/entities/gs1nz_NaudotojoParaiska',\r\n    requestOptions\r\n  )\r\n    .then((response) => response.text())\r\n    .then((result) => {\r\n      console.log(result)\r\n      return true\r\n    })\r\n    .catch((error) => {\r\n      console.log('error', error);\r\n      errLst.errors.push(error);\r\n      return false\r\n    });\r\n}\r\n\r\n// export Paraiska\r\n// export fillDto\r\n","export default [\r\n  { ALPHA_2_CODE: 'AD', LT_SHORT_NAME: 'Andora' },\r\n  { ALPHA_2_CODE: 'AE', LT_SHORT_NAME: 'Jungtiniai Arabų Emyratai' },\r\n  { ALPHA_2_CODE: 'AF', LT_SHORT_NAME: 'Afganistanas' },\r\n  { ALPHA_2_CODE: 'AG', LT_SHORT_NAME: 'Antigva ir Barbuda' },\r\n  { ALPHA_2_CODE: 'AI', LT_SHORT_NAME: 'Angilija' },\r\n  { ALPHA_2_CODE: 'AL', LT_SHORT_NAME: 'Albanija' },\r\n  { ALPHA_2_CODE: 'AM', LT_SHORT_NAME: 'Armėnija' },\r\n  { ALPHA_2_CODE: 'AO', LT_SHORT_NAME: 'Angola' },\r\n  { ALPHA_2_CODE: 'AQ', LT_SHORT_NAME: 'Antarktika' },\r\n  { ALPHA_2_CODE: 'AR', LT_SHORT_NAME: 'Argentina' },\r\n  { ALPHA_2_CODE: 'AS', LT_SHORT_NAME: 'Amerikos Samoa' },\r\n  { ALPHA_2_CODE: 'AT', LT_SHORT_NAME: 'Austrija' },\r\n  { ALPHA_2_CODE: 'AU', LT_SHORT_NAME: 'Australija' },\r\n  { ALPHA_2_CODE: 'AW', LT_SHORT_NAME: 'Aruba' },\r\n  { ALPHA_2_CODE: 'AX', LT_SHORT_NAME: 'Alandų salos' },\r\n  { ALPHA_2_CODE: 'AZ', LT_SHORT_NAME: 'Azerbaidžanas' },\r\n  { ALPHA_2_CODE: 'BA', LT_SHORT_NAME: 'Bosnija ir Hercegovina' },\r\n  { ALPHA_2_CODE: 'BB', LT_SHORT_NAME: 'Barbadosas' },\r\n  { ALPHA_2_CODE: 'BD', LT_SHORT_NAME: 'Bangladešas' },\r\n  { ALPHA_2_CODE: 'BE', LT_SHORT_NAME: 'Belgija' },\r\n  { ALPHA_2_CODE: 'BF', LT_SHORT_NAME: 'Burkina Faso' },\r\n  { ALPHA_2_CODE: 'BG', LT_SHORT_NAME: 'Bulgarija' },\r\n  { ALPHA_2_CODE: 'BH', LT_SHORT_NAME: 'Bahreinas' },\r\n  { ALPHA_2_CODE: 'BI', LT_SHORT_NAME: 'Burundis' },\r\n  { ALPHA_2_CODE: 'BY', LT_SHORT_NAME: 'Baltarusija' },\r\n  { ALPHA_2_CODE: 'BJ', LT_SHORT_NAME: 'Beninas' },\r\n  { ALPHA_2_CODE: 'BL', LT_SHORT_NAME: 'Saint Barthelemy' },\r\n  { ALPHA_2_CODE: 'BM', LT_SHORT_NAME: 'Bermudai' },\r\n  { ALPHA_2_CODE: 'BN', LT_SHORT_NAME: 'Brunei Darussalam' },\r\n  { ALPHA_2_CODE: 'BO', LT_SHORT_NAME: 'Bolivija' },\r\n  { ALPHA_2_CODE: 'BQ', LT_SHORT_NAME: 'Bonaire, Sint Eustatius ir Saba' },\r\n  { ALPHA_2_CODE: 'BR', LT_SHORT_NAME: 'Brazilija' },\r\n  { ALPHA_2_CODE: 'BS', LT_SHORT_NAME: 'Bahamai' },\r\n  { ALPHA_2_CODE: 'BT', LT_SHORT_NAME: 'Butanas' },\r\n  { ALPHA_2_CODE: 'BV', LT_SHORT_NAME: 'Bouvet sala' },\r\n  { ALPHA_2_CODE: 'BW', LT_SHORT_NAME: 'Botsvana' },\r\n  { ALPHA_2_CODE: 'BZ', LT_SHORT_NAME: 'Belizas' },\r\n  { ALPHA_2_CODE: 'CA', LT_SHORT_NAME: 'Kanada' },\r\n  { ALPHA_2_CODE: 'CC', LT_SHORT_NAME: 'Kokosų (Kilingo) salos' },\r\n  { ALPHA_2_CODE: 'CD', LT_SHORT_NAME: 'Kongas (Demokratinė Respublika)' },\r\n  { ALPHA_2_CODE: 'CF', LT_SHORT_NAME: 'Centrinės Afrikos Respublika' },\r\n  { ALPHA_2_CODE: 'CG', LT_SHORT_NAME: 'Kongas' },\r\n  { ALPHA_2_CODE: 'CH', LT_SHORT_NAME: 'Šveicarija' },\r\n  { ALPHA_2_CODE: 'CI', LT_SHORT_NAME: \"Cote d'Ivoire\" },\r\n  { ALPHA_2_CODE: 'CY', LT_SHORT_NAME: 'Kipras' },\r\n  { ALPHA_2_CODE: 'CK', LT_SHORT_NAME: 'Kuko salos' },\r\n  { ALPHA_2_CODE: 'CL', LT_SHORT_NAME: 'Cile' },\r\n  { ALPHA_2_CODE: 'CM', LT_SHORT_NAME: 'Kamerūnas' },\r\n  { ALPHA_2_CODE: 'CN', LT_SHORT_NAME: 'Kinija' },\r\n  { ALPHA_2_CODE: 'CO', LT_SHORT_NAME: 'Kolumbija' },\r\n  { ALPHA_2_CODE: 'CR', LT_SHORT_NAME: 'Kosta Rika' },\r\n  { ALPHA_2_CODE: 'CU', LT_SHORT_NAME: 'Kuba' },\r\n  { ALPHA_2_CODE: 'CV', LT_SHORT_NAME: 'Cabo Verde' },\r\n  { ALPHA_2_CODE: 'CW', LT_SHORT_NAME: 'Kurasao' },\r\n  { ALPHA_2_CODE: 'CX', LT_SHORT_NAME: 'Kaledų sala' },\r\n  { ALPHA_2_CODE: 'CZ', LT_SHORT_NAME: 'Čekija' },\r\n  { ALPHA_2_CODE: 'DE', LT_SHORT_NAME: 'Vokietija' },\r\n  { ALPHA_2_CODE: 'DJ', LT_SHORT_NAME: 'Džibutis' },\r\n  { ALPHA_2_CODE: 'DK', LT_SHORT_NAME: 'Danija' },\r\n  { ALPHA_2_CODE: 'DM', LT_SHORT_NAME: 'Dominika' },\r\n  { ALPHA_2_CODE: 'DO', LT_SHORT_NAME: 'Dominikos Respublika' },\r\n  { ALPHA_2_CODE: 'DZ', LT_SHORT_NAME: 'Alžyras' },\r\n  { ALPHA_2_CODE: 'EC', LT_SHORT_NAME: 'Ekvadoras' },\r\n  { ALPHA_2_CODE: 'EE', LT_SHORT_NAME: 'Estija' },\r\n  { ALPHA_2_CODE: 'EG', LT_SHORT_NAME: 'Egiptas' },\r\n  { ALPHA_2_CODE: 'EH', LT_SHORT_NAME: 'Vakarų Sachara' },\r\n  { ALPHA_2_CODE: 'ER', LT_SHORT_NAME: 'Eritrėja' },\r\n  { ALPHA_2_CODE: 'ES', LT_SHORT_NAME: 'Ispanija' },\r\n  { ALPHA_2_CODE: 'ET', LT_SHORT_NAME: 'Etiopija' },\r\n  { ALPHA_2_CODE: 'FI', LT_SHORT_NAME: 'Suomija' },\r\n  { ALPHA_2_CODE: 'FJ', LT_SHORT_NAME: 'Fidžis' },\r\n  { ALPHA_2_CODE: 'FK', LT_SHORT_NAME: 'Folklando salos' },\r\n  { ALPHA_2_CODE: 'FM', LT_SHORT_NAME: 'Mikronezija' },\r\n  { ALPHA_2_CODE: 'FO', LT_SHORT_NAME: 'Farerų salos' },\r\n  { ALPHA_2_CODE: 'FR', LT_SHORT_NAME: 'Prancūzija' },\r\n  { ALPHA_2_CODE: 'GA', LT_SHORT_NAME: 'Gabonas' },\r\n  { ALPHA_2_CODE: 'GB', LT_SHORT_NAME: 'Jungtinė Karalystė' },\r\n  { ALPHA_2_CODE: 'GD', LT_SHORT_NAME: 'Grenada' },\r\n  { ALPHA_2_CODE: 'GE', LT_SHORT_NAME: 'Gruzija' },\r\n  { ALPHA_2_CODE: 'GF', LT_SHORT_NAME: 'Prancūzijos Gviana' },\r\n  { ALPHA_2_CODE: 'GG', LT_SHORT_NAME: 'Gernsis' },\r\n  { ALPHA_2_CODE: 'GH', LT_SHORT_NAME: 'Gana' },\r\n  { ALPHA_2_CODE: 'GI', LT_SHORT_NAME: 'Gibraltaras' },\r\n  { ALPHA_2_CODE: 'GY', LT_SHORT_NAME: 'Gajana' },\r\n  { ALPHA_2_CODE: 'GL', LT_SHORT_NAME: 'Grenlandija' },\r\n  { ALPHA_2_CODE: 'GM', LT_SHORT_NAME: 'Gambija' },\r\n  { ALPHA_2_CODE: 'GN', LT_SHORT_NAME: 'Gvinėja' },\r\n  { ALPHA_2_CODE: 'GP', LT_SHORT_NAME: 'Gvadelupa' },\r\n  { ALPHA_2_CODE: 'GQ', LT_SHORT_NAME: 'Pusiaujo Gvinėja' },\r\n  { ALPHA_2_CODE: 'GR', LT_SHORT_NAME: 'Graikija' },\r\n  {\r\n    ALPHA_2_CODE: 'GS',\r\n    LT_SHORT_NAME: 'Pietų Džordžija ir Pietų Sandvico salos',\r\n  },\r\n  { ALPHA_2_CODE: 'GT', LT_SHORT_NAME: 'Gvatemala' },\r\n  { ALPHA_2_CODE: 'GU', LT_SHORT_NAME: 'Guamas' },\r\n  { ALPHA_2_CODE: 'GW', LT_SHORT_NAME: 'Gvinėja Bisau' },\r\n  { ALPHA_2_CODE: 'HK', LT_SHORT_NAME: 'Honkongas' },\r\n  { ALPHA_2_CODE: 'HM', LT_SHORT_NAME: 'Heard sala ir McDonaldo salos' },\r\n  { ALPHA_2_CODE: 'HN', LT_SHORT_NAME: 'Honduras' },\r\n  { ALPHA_2_CODE: 'HR', LT_SHORT_NAME: 'Kroatija' },\r\n  { ALPHA_2_CODE: 'HT', LT_SHORT_NAME: 'Haitis' },\r\n  { ALPHA_2_CODE: 'HU', LT_SHORT_NAME: 'Vengrija' },\r\n  { ALPHA_2_CODE: 'ID', LT_SHORT_NAME: 'Indonezija' },\r\n  { ALPHA_2_CODE: 'IE', LT_SHORT_NAME: 'Airija' },\r\n  { ALPHA_2_CODE: 'IL', LT_SHORT_NAME: 'Izraelis' },\r\n  { ALPHA_2_CODE: 'IM', LT_SHORT_NAME: 'Meno sala' },\r\n  { ALPHA_2_CODE: 'IN', LT_SHORT_NAME: 'Indija' },\r\n  { ALPHA_2_CODE: 'IO', LT_SHORT_NAME: 'Indijos vandenyno britų teritorija' },\r\n  { ALPHA_2_CODE: 'IQ', LT_SHORT_NAME: 'Irakas' },\r\n  { ALPHA_2_CODE: 'IR', LT_SHORT_NAME: 'Iranas (Islamo Respublika)' },\r\n  { ALPHA_2_CODE: 'IS', LT_SHORT_NAME: 'Islandija' },\r\n  { ALPHA_2_CODE: 'IT', LT_SHORT_NAME: 'Italija' },\r\n  { ALPHA_2_CODE: 'YE', LT_SHORT_NAME: 'Jemenas' },\r\n  { ALPHA_2_CODE: 'YT', LT_SHORT_NAME: 'Majotas' },\r\n  { ALPHA_2_CODE: 'JE', LT_SHORT_NAME: 'Džersis' },\r\n  { ALPHA_2_CODE: 'JM', LT_SHORT_NAME: 'Jamaika' },\r\n  { ALPHA_2_CODE: 'JO', LT_SHORT_NAME: 'Jordanija' },\r\n  { ALPHA_2_CODE: 'JP', LT_SHORT_NAME: 'Japonija' },\r\n  { ALPHA_2_CODE: 'KE', LT_SHORT_NAME: 'Kenija' },\r\n  { ALPHA_2_CODE: 'KG', LT_SHORT_NAME: 'Kirgizija' },\r\n  { ALPHA_2_CODE: 'KH', LT_SHORT_NAME: 'Kambodža' },\r\n  { ALPHA_2_CODE: 'KI', LT_SHORT_NAME: 'Kiribatis' },\r\n  { ALPHA_2_CODE: 'KY', LT_SHORT_NAME: 'Kaimanų salos' },\r\n  { ALPHA_2_CODE: 'KM', LT_SHORT_NAME: 'Komorai' },\r\n  { ALPHA_2_CODE: 'KN', LT_SHORT_NAME: 'Sent Kitsas ir Nevis' },\r\n  {\r\n    ALPHA_2_CODE: 'KP',\r\n    LT_SHORT_NAME: 'Korėja (Liaudies Demokratinė Respublika)',\r\n  },\r\n  { ALPHA_2_CODE: 'KR', LT_SHORT_NAME: 'Korėja (Respublika)' },\r\n  { ALPHA_2_CODE: 'KW', LT_SHORT_NAME: 'Kuveitas' },\r\n  { ALPHA_2_CODE: 'KZ', LT_SHORT_NAME: 'Kazachstanas' },\r\n  {\r\n    ALPHA_2_CODE: 'LA',\r\n    LT_SHORT_NAME: 'Laoso Liaudies Demokratinė Respublika',\r\n  },\r\n  { ALPHA_2_CODE: 'LB', LT_SHORT_NAME: 'Libanas' },\r\n  { ALPHA_2_CODE: 'LC', LT_SHORT_NAME: 'Sent Lusija' },\r\n  { ALPHA_2_CODE: 'LI', LT_SHORT_NAME: 'Lichtenšteinas' },\r\n  { ALPHA_2_CODE: 'LY', LT_SHORT_NAME: 'Libija' },\r\n  { ALPHA_2_CODE: 'LK', LT_SHORT_NAME: 'Šri Lanka' },\r\n  { ALPHA_2_CODE: 'LR', LT_SHORT_NAME: 'Liberija' },\r\n  { ALPHA_2_CODE: 'LS', LT_SHORT_NAME: 'Lesotas' },\r\n  { ALPHA_2_CODE: 'LT', LT_SHORT_NAME: 'Lietuva' },\r\n  { ALPHA_2_CODE: 'LU', LT_SHORT_NAME: 'Liuksemburgas' },\r\n  { ALPHA_2_CODE: 'LV', LT_SHORT_NAME: 'Latvija' },\r\n  { ALPHA_2_CODE: 'MA', LT_SHORT_NAME: 'Marokas' },\r\n  { ALPHA_2_CODE: 'MC', LT_SHORT_NAME: 'Monakas' },\r\n  { ALPHA_2_CODE: 'MD', LT_SHORT_NAME: 'Moldova' },\r\n  { ALPHA_2_CODE: 'ME', LT_SHORT_NAME: 'Juodkalnija' },\r\n  { ALPHA_2_CODE: 'MF', LT_SHORT_NAME: 'Saint Martin (prancūzų dalis)' },\r\n  { ALPHA_2_CODE: 'MG', LT_SHORT_NAME: 'Madagaskaras' },\r\n  { ALPHA_2_CODE: 'MH', LT_SHORT_NAME: 'Maršalų salos' },\r\n  { ALPHA_2_CODE: 'MY', LT_SHORT_NAME: 'Malaizija' },\r\n  {\r\n    ALPHA_2_CODE: 'MK',\r\n    LT_SHORT_NAME: 'Makedonija (Buvusioji Jugoslavijos Respublika)',\r\n  },\r\n  { ALPHA_2_CODE: 'ML', LT_SHORT_NAME: 'Malis' },\r\n  { ALPHA_2_CODE: 'MM', LT_SHORT_NAME: 'Mianmaras' },\r\n  { ALPHA_2_CODE: 'MN', LT_SHORT_NAME: 'Mongolija' },\r\n  { ALPHA_2_CODE: 'MO', LT_SHORT_NAME: 'Makao' },\r\n  { ALPHA_2_CODE: 'MP', LT_SHORT_NAME: 'Šiaurės Marianų salos' },\r\n  { ALPHA_2_CODE: 'MQ', LT_SHORT_NAME: 'Martinika' },\r\n  { ALPHA_2_CODE: 'MR', LT_SHORT_NAME: 'Mauritanija' },\r\n  { ALPHA_2_CODE: 'MS', LT_SHORT_NAME: 'Montseratas' },\r\n  { ALPHA_2_CODE: 'MT', LT_SHORT_NAME: 'Malta' },\r\n  { ALPHA_2_CODE: 'MU', LT_SHORT_NAME: 'Mauricijus' },\r\n  { ALPHA_2_CODE: 'MV', LT_SHORT_NAME: 'Maldyvai' },\r\n  { ALPHA_2_CODE: 'MW', LT_SHORT_NAME: 'Malavis' },\r\n  { ALPHA_2_CODE: 'MX', LT_SHORT_NAME: 'Meksika' },\r\n  { ALPHA_2_CODE: 'MZ', LT_SHORT_NAME: 'Mozambikas' },\r\n  { ALPHA_2_CODE: 'NA', LT_SHORT_NAME: 'Namibija' },\r\n  { ALPHA_2_CODE: 'NC', LT_SHORT_NAME: 'Naujoji Kaledonija' },\r\n  { ALPHA_2_CODE: 'NE', LT_SHORT_NAME: 'Nigeris' },\r\n  { ALPHA_2_CODE: 'NF', LT_SHORT_NAME: 'Norfolko sala' },\r\n  { ALPHA_2_CODE: 'NG', LT_SHORT_NAME: 'Nigerija' },\r\n  { ALPHA_2_CODE: 'NI', LT_SHORT_NAME: 'Nikaragva' },\r\n  { ALPHA_2_CODE: 'NL', LT_SHORT_NAME: 'Olandija' },\r\n  { ALPHA_2_CODE: 'NO', LT_SHORT_NAME: 'Norvegija' },\r\n  { ALPHA_2_CODE: 'NP', LT_SHORT_NAME: 'Nepalas' },\r\n  { ALPHA_2_CODE: 'NR', LT_SHORT_NAME: 'Nauru' },\r\n  { ALPHA_2_CODE: 'NU', LT_SHORT_NAME: 'Niue' },\r\n  { ALPHA_2_CODE: 'NZ', LT_SHORT_NAME: 'Naujoji Zelandija' },\r\n  { ALPHA_2_CODE: 'OM', LT_SHORT_NAME: 'Omanas' },\r\n  { ALPHA_2_CODE: 'PA', LT_SHORT_NAME: 'Panama' },\r\n  { ALPHA_2_CODE: 'PE', LT_SHORT_NAME: 'Peru' },\r\n  { ALPHA_2_CODE: 'PF', LT_SHORT_NAME: 'Prancūzų Polinezija' },\r\n  { ALPHA_2_CODE: 'PG', LT_SHORT_NAME: 'Papua Naujoji Gvinėja' },\r\n  { ALPHA_2_CODE: 'PH', LT_SHORT_NAME: 'Filipinai' },\r\n  { ALPHA_2_CODE: 'PY', LT_SHORT_NAME: 'Paragvajus' },\r\n  { ALPHA_2_CODE: 'PK', LT_SHORT_NAME: 'Pakistanas' },\r\n  { ALPHA_2_CODE: 'PL', LT_SHORT_NAME: 'Lenkija' },\r\n  { ALPHA_2_CODE: 'PM', LT_SHORT_NAME: 'Sen Pjeras ir Mikelonas' },\r\n  { ALPHA_2_CODE: 'PN', LT_SHORT_NAME: 'Pitkernas' },\r\n  { ALPHA_2_CODE: 'PR', LT_SHORT_NAME: 'Puerto Rikas' },\r\n  { ALPHA_2_CODE: 'PS', LT_SHORT_NAME: 'Palestina' },\r\n  { ALPHA_2_CODE: 'PT', LT_SHORT_NAME: 'Portugalija' },\r\n  { ALPHA_2_CODE: 'PW', LT_SHORT_NAME: 'Palau' },\r\n  { ALPHA_2_CODE: 'QA', LT_SHORT_NAME: 'Kataras' },\r\n  { ALPHA_2_CODE: 'RE', LT_SHORT_NAME: 'Reunionas' },\r\n  { ALPHA_2_CODE: 'RO', LT_SHORT_NAME: 'Rumunija' },\r\n  { ALPHA_2_CODE: 'RS', LT_SHORT_NAME: 'Serbija' },\r\n  { ALPHA_2_CODE: 'RU', LT_SHORT_NAME: 'Rusijos Federacija' },\r\n  { ALPHA_2_CODE: 'RW', LT_SHORT_NAME: 'Ruanda' },\r\n  { ALPHA_2_CODE: 'SA', LT_SHORT_NAME: 'Saudo Arabija' },\r\n  { ALPHA_2_CODE: 'SB', LT_SHORT_NAME: 'Saliamono salos' },\r\n  { ALPHA_2_CODE: 'SC', LT_SHORT_NAME: 'Seišeliai' },\r\n  { ALPHA_2_CODE: 'SD', LT_SHORT_NAME: 'Sudanas ' },\r\n  { ALPHA_2_CODE: 'SE', LT_SHORT_NAME: 'Švedija' },\r\n  { ALPHA_2_CODE: 'SG', LT_SHORT_NAME: 'Singapuras' },\r\n  {\r\n    ALPHA_2_CODE: 'SH',\r\n    LT_SHORT_NAME: 'Šv. Elena, Ascension ir Tristan da Cunha',\r\n  },\r\n  { ALPHA_2_CODE: 'SI', LT_SHORT_NAME: 'Slovėnija' },\r\n  { ALPHA_2_CODE: 'SY', LT_SHORT_NAME: 'Sirijos Arabų Respublika' },\r\n  { ALPHA_2_CODE: 'SJ', LT_SHORT_NAME: 'Svalbardas ir Janas Majenas' },\r\n  { ALPHA_2_CODE: 'SK', LT_SHORT_NAME: 'Slovakija' },\r\n  { ALPHA_2_CODE: 'SL', LT_SHORT_NAME: 'Siera Leonė' },\r\n  { ALPHA_2_CODE: 'SM', LT_SHORT_NAME: 'San Marinas' },\r\n  { ALPHA_2_CODE: 'SN', LT_SHORT_NAME: 'Senegalas' },\r\n  { ALPHA_2_CODE: 'SO', LT_SHORT_NAME: 'Somalis' },\r\n  { ALPHA_2_CODE: 'SR', LT_SHORT_NAME: 'Surinamas' },\r\n  { ALPHA_2_CODE: 'SS', LT_SHORT_NAME: 'Pietų Sudanas' },\r\n  { ALPHA_2_CODE: 'ST', LT_SHORT_NAME: 'San Tome ir Prinsipe' },\r\n  { ALPHA_2_CODE: 'SV', LT_SHORT_NAME: 'Salvadoras' },\r\n  { ALPHA_2_CODE: 'SX', LT_SHORT_NAME: 'Sint Maarten (olandu dalis)' },\r\n  { ALPHA_2_CODE: 'SZ', LT_SHORT_NAME: 'Svazilendas' },\r\n  { ALPHA_2_CODE: 'TC', LT_SHORT_NAME: 'Turkso ir Caicoso salos' },\r\n  { ALPHA_2_CODE: 'TD', LT_SHORT_NAME: 'Čadas' },\r\n  { ALPHA_2_CODE: 'TF', LT_SHORT_NAME: 'Prancūzijos Pietinės teritorijos' },\r\n  { ALPHA_2_CODE: 'TG', LT_SHORT_NAME: 'Togas' },\r\n  { ALPHA_2_CODE: 'TH', LT_SHORT_NAME: 'Tailandas' },\r\n  { ALPHA_2_CODE: 'TJ', LT_SHORT_NAME: 'Tadžikistanas' },\r\n  { ALPHA_2_CODE: 'TK', LT_SHORT_NAME: 'Tokelau' },\r\n  { ALPHA_2_CODE: 'TL', LT_SHORT_NAME: 'Timoras-Leste' },\r\n  { ALPHA_2_CODE: 'TM', LT_SHORT_NAME: 'Turkmenistanas' },\r\n  { ALPHA_2_CODE: 'TN', LT_SHORT_NAME: 'Tunisas' },\r\n  { ALPHA_2_CODE: 'TO', LT_SHORT_NAME: 'Tonga' },\r\n  { ALPHA_2_CODE: 'TR', LT_SHORT_NAME: 'Turkija' },\r\n  { ALPHA_2_CODE: 'TT', LT_SHORT_NAME: 'Trinidadas ir Tobagas' },\r\n  { ALPHA_2_CODE: 'TV', LT_SHORT_NAME: 'Tuvalu' },\r\n  { ALPHA_2_CODE: 'TW', LT_SHORT_NAME: 'Taivanas' },\r\n  { ALPHA_2_CODE: 'TZ', LT_SHORT_NAME: 'Tanzanija' },\r\n  { ALPHA_2_CODE: 'UA', LT_SHORT_NAME: 'Ukraina' },\r\n  { ALPHA_2_CODE: 'UG', LT_SHORT_NAME: 'Uganda' },\r\n  { ALPHA_2_CODE: 'UY', LT_SHORT_NAME: 'Urugvajus' },\r\n  { ALPHA_2_CODE: 'UM', LT_SHORT_NAME: 'Mažosios atokios salos JAV' },\r\n  { ALPHA_2_CODE: 'US', LT_SHORT_NAME: 'Jungtinės Amerikos Valstijos' },\r\n  { ALPHA_2_CODE: 'UZ', LT_SHORT_NAME: 'Uzbekistanas' },\r\n  { ALPHA_2_CODE: 'VA', LT_SHORT_NAME: 'Vatikanas' },\r\n  { ALPHA_2_CODE: 'VC', LT_SHORT_NAME: 'Sent Vinsentas ir Grenadinai' },\r\n  { ALPHA_2_CODE: 'VE', LT_SHORT_NAME: 'Venesuela' },\r\n  { ALPHA_2_CODE: 'VG', LT_SHORT_NAME: 'Virginijos salos (britų)' },\r\n  { ALPHA_2_CODE: 'VI', LT_SHORT_NAME: 'Virginijos salos (JAV)' },\r\n  { ALPHA_2_CODE: 'VN', LT_SHORT_NAME: 'Vietnamas' },\r\n  { ALPHA_2_CODE: 'VU', LT_SHORT_NAME: 'Vanuatu' },\r\n  { ALPHA_2_CODE: 'WF', LT_SHORT_NAME: 'Volisas ir Futuna' },\r\n  { ALPHA_2_CODE: 'WS', LT_SHORT_NAME: 'Samoa' },\r\n  { ALPHA_2_CODE: 'ZA', LT_SHORT_NAME: 'Pietų Afrika' },\r\n  { ALPHA_2_CODE: 'ZM', LT_SHORT_NAME: 'Zambija' },\r\n  { ALPHA_2_CODE: 'ZW', LT_SHORT_NAME: 'Zimbabvė' },\r\n];\r\n","export default [\r\n  { MST_ID: 1, MST_Name: 'Kaunas' },\r\n  { MST_ID: 2, MST_Name: 'Klaipėdos r. ' },\r\n  { MST_ID: 3, MST_Name: 'Kupiškio r.' },\r\n  { MST_ID: 4, MST_Name: 'Kaišiadorių r.' },\r\n  { MST_ID: 5, MST_Name: 'Vilnius' },\r\n  { MST_ID: 6, MST_Name: 'Vilkaviškio r.' },\r\n  { MST_ID: 7, MST_Name: 'Klaipėda' },\r\n  { MST_ID: 8, MST_Name: 'Kedainių r.' },\r\n  { MST_ID: 9, MST_Name: 'Tauragės r.' },\r\n  { MST_ID: 10, MST_Name: 'Šilutės r.' },\r\n  { MST_ID: 11, MST_Name: 'Alytus' },\r\n  { MST_ID: 12, MST_Name: 'Plungės r.' },\r\n  { MST_ID: 13, MST_Name: 'Vilniaus r.' },\r\n  { MST_ID: 14, MST_Name: 'Birštonas' },\r\n  { MST_ID: 15, MST_Name: 'Neringa' },\r\n  { MST_ID: 16, MST_Name: 'Šilalės r.' },\r\n  { MST_ID: 17, MST_Name: 'Zarasų r.' },\r\n  { MST_ID: 18, MST_Name: 'Utenos r.' },\r\n  { MST_ID: 19, MST_Name: 'Druskininkai' },\r\n  { MST_ID: 20, MST_Name: 'Palanga' },\r\n  { MST_ID: 21, MST_Name: 'Kauno r.' },\r\n  { MST_ID: 22, MST_Name: 'Panevežys' },\r\n  { MST_ID: 23, MST_Name: 'Ignalinos r.' },\r\n  { MST_ID: 24, MST_Name: 'Varėnos r.' },\r\n  { MST_ID: 25, MST_Name: 'Kretingos r.' },\r\n  { MST_ID: 26, MST_Name: 'Jonavos r.' },\r\n  { MST_ID: 27, MST_Name: 'Anykšcių r.' },\r\n  { MST_ID: 28, MST_Name: 'Pasvalio r.' },\r\n  { MST_ID: 29, MST_Name: 'Kelmės r.' },\r\n  { MST_ID: 30, MST_Name: 'Švenčionių r.' },\r\n  { MST_ID: 31, MST_Name: 'Telšių r.' },\r\n  { MST_ID: 32, MST_Name: 'Trakų r.' },\r\n  { MST_ID: 33, MST_Name: 'Biržų r.' },\r\n  { MST_ID: 34, MST_Name: 'Panevežio r.' },\r\n  { MST_ID: 35, MST_Name: 'Joniškio r.' },\r\n  { MST_ID: 36, MST_Name: 'Akmenės r.' },\r\n  { MST_ID: 37, MST_Name: 'Šiaulių r.' },\r\n  { MST_ID: 38, MST_Name: 'Radviliškio r.' },\r\n  { MST_ID: 39, MST_Name: 'Marijampolė' },\r\n  { MST_ID: 40, MST_Name: 'Lazdijų r.' },\r\n  { MST_ID: 41, MST_Name: 'Mažeikių r.' },\r\n  { MST_ID: 42, MST_Name: 'Skuodo r.' },\r\n  { MST_ID: 43, MST_Name: 'Jurbarko r.' },\r\n  { MST_ID: 44, MST_Name: 'Ukmerges r.' },\r\n  { MST_ID: 45, MST_Name: 'Alytaus r.' },\r\n  { MST_ID: 46, MST_Name: 'Raseinių r.' },\r\n  { MST_ID: 47, MST_Name: 'Prienų r.' },\r\n  { MST_ID: 48, MST_Name: 'Marijampolės r.' },\r\n  { MST_ID: 49, MST_Name: 'Šakių r.' },\r\n  { MST_ID: 50, MST_Name: 'Šalčininkų r.' },\r\n  { MST_ID: 51, MST_Name: 'Pakruojo r.' },\r\n  { MST_ID: 52, MST_Name: 'Molėtų r.' },\r\n  { MST_ID: 53, MST_Name: 'Rokiškio r.' },\r\n  { MST_ID: 54, MST_Name: 'Visaginas' },\r\n  { MST_ID: 55, MST_Name: 'Šiauliai' },\r\n  { MST_ID: 56, MST_Name: 'Širvintų r.' },\r\n  { MST_ID: 57, MST_Name: 'Akmenė' },\r\n  { MST_ID: 58, MST_Name: 'Anykščiai' },\r\n  { MST_ID: 59, MST_Name: 'Ariogala' },\r\n  { MST_ID: 60, MST_Name: 'Baltoji Vokė' },\r\n  { MST_ID: 61, MST_Name: 'Biržai' },\r\n  { MST_ID: 62, MST_Name: 'Daugai' },\r\n  { MST_ID: 63, MST_Name: 'Dukštas' },\r\n  { MST_ID: 64, MST_Name: 'Dusetos' },\r\n  { MST_ID: 65, MST_Name: 'Eišiškės' },\r\n  { MST_ID: 66, MST_Name: 'Elektrėnai' },\r\n  { MST_ID: 67, MST_Name: 'Ežerėlis' },\r\n  { MST_ID: 68, MST_Name: 'Gargždai' },\r\n  { MST_ID: 69, MST_Name: 'Garliava' },\r\n  { MST_ID: 70, MST_Name: 'Gelgaudiškis' },\r\n  { MST_ID: 71, MST_Name: 'Grigiškės' },\r\n  { MST_ID: 72, MST_Name: 'Ignalina' },\r\n  { MST_ID: 73, MST_Name: 'Jieznas' },\r\n  { MST_ID: 74, MST_Name: 'Jonava' },\r\n  { MST_ID: 75, MST_Name: 'Joniškėlis' },\r\n  { MST_ID: 76, MST_Name: 'Joniškis' },\r\n  { MST_ID: 77, MST_Name: 'Jurbarkas' },\r\n  { MST_ID: 78, MST_Name: 'Kaišiadorys' },\r\n  { MST_ID: 79, MST_Name: 'Kalvarija' },\r\n  { MST_ID: 80, MST_Name: 'Kavarskas' },\r\n  { MST_ID: 81, MST_Name: 'Kazlų Rūda' },\r\n  { MST_ID: 82, MST_Name: 'Kėdainiai' },\r\n  { MST_ID: 83, MST_Name: 'Kelmė' },\r\n  { MST_ID: 84, MST_Name: 'Kybartai' },\r\n  { MST_ID: 85, MST_Name: 'Kretinga' },\r\n  { MST_ID: 86, MST_Name: 'Kudirkos Naumiestis' },\r\n  { MST_ID: 87, MST_Name: 'Kupiškis' },\r\n  { MST_ID: 88, MST_Name: 'Kuršėnai' },\r\n  { MST_ID: 89, MST_Name: 'Lazdijai' },\r\n  { MST_ID: 90, MST_Name: 'Lentvaris' },\r\n  { MST_ID: 91, MST_Name: 'Linkuva' },\r\n  { MST_ID: 92, MST_Name: 'Mažeikiai' },\r\n  { MST_ID: 93, MST_Name: 'Molėtai' },\r\n  { MST_ID: 94, MST_Name: 'Naujoji Akmene' },\r\n  { MST_ID: 95, MST_Name: 'Nemenčinė' },\r\n  { MST_ID: 96, MST_Name: 'Obeliai' },\r\n  { MST_ID: 97, MST_Name: 'Pabradė' },\r\n  { MST_ID: 98, MST_Name: 'Pagėgiai' },\r\n  { MST_ID: 99, MST_Name: 'Pakruojis' },\r\n  { MST_ID: 100, MST_Name: 'Pandelys' },\r\n  { MST_ID: 101, MST_Name: 'Panemunė' },\r\n  { MST_ID: 102, MST_Name: 'Pasvalys' },\r\n  { MST_ID: 103, MST_Name: 'Plungė' },\r\n  { MST_ID: 104, MST_Name: 'Priekulė' },\r\n  { MST_ID: 105, MST_Name: 'Prienai' },\r\n  { MST_ID: 106, MST_Name: 'Radviliškis' },\r\n  { MST_ID: 107, MST_Name: 'Ramygala' },\r\n  { MST_ID: 108, MST_Name: 'Radviliškis' },\r\n  { MST_ID: 109, MST_Name: 'Ramygala' },\r\n  { MST_ID: 110, MST_Name: 'Raseiniai' },\r\n  { MST_ID: 111, MST_Name: 'Rietavas' },\r\n  { MST_ID: 112, MST_Name: 'Rokiškis' },\r\n  { MST_ID: 113, MST_Name: 'Rūdiškės' },\r\n  { MST_ID: 114, MST_Name: 'Salantai' },\r\n  { MST_ID: 115, MST_Name: 'Seda' },\r\n  { MST_ID: 116, MST_Name: 'Simnas' },\r\n  { MST_ID: 117, MST_Name: 'Skaudvilė' },\r\n  { MST_ID: 118, MST_Name: 'Skuodas' },\r\n  { MST_ID: 119, MST_Name: 'Smalininkai' },\r\n  { MST_ID: 120, MST_Name: 'Subačius' },\r\n  { MST_ID: 121, MST_Name: 'Šakiai' },\r\n  { MST_ID: 122, MST_Name: 'Šalčininkai' },\r\n  { MST_ID: 123, MST_Name: 'Šeduva' },\r\n  { MST_ID: 124, MST_Name: 'Šilalė' },\r\n  { MST_ID: 125, MST_Name: 'Šilutė' },\r\n  { MST_ID: 126, MST_Name: 'Širvintos' },\r\n  { MST_ID: 127, MST_Name: 'Švenčionėliai' },\r\n  { MST_ID: 128, MST_Name: 'Švenčionys' },\r\n  { MST_ID: 129, MST_Name: 'Tauragė' },\r\n  { MST_ID: 130, MST_Name: 'Telšiai' },\r\n  { MST_ID: 131, MST_Name: 'Tytuvėnai' },\r\n  { MST_ID: 132, MST_Name: 'Trakai' },\r\n  { MST_ID: 133, MST_Name: 'Troškūnai' },\r\n  { MST_ID: 134, MST_Name: 'Ukmergė' },\r\n  { MST_ID: 135, MST_Name: 'Utena' },\r\n  { MST_ID: 136, MST_Name: 'Užventis' },\r\n  { MST_ID: 137, MST_Name: 'Vabalninkas' },\r\n  { MST_ID: 138, MST_Name: 'Varėna' },\r\n  { MST_ID: 139, MST_Name: 'Varniai' },\r\n  { MST_ID: 140, MST_Name: 'Veisiejai' },\r\n  { MST_ID: 141, MST_Name: 'Venta' },\r\n  { MST_ID: 142, MST_Name: 'Viekšniai' },\r\n  { MST_ID: 143, MST_Name: 'Vievis' },\r\n  { MST_ID: 144, MST_Name: 'Vilkaviškis' },\r\n  { MST_ID: 145, MST_Name: 'Vilkija' },\r\n  { MST_ID: 146, MST_Name: 'Virbalis' },\r\n  { MST_ID: 147, MST_Name: 'Zarasai' },\r\n  { MST_ID: 148, MST_Name: 'Žagarė' },\r\n  { MST_ID: 149, MST_Name: 'Žiežmariai' },\r\n];\r\n","<script>\r\n    export let nr = \"01\"\r\n    export let desc1 = \"?\"\r\n    export let currentTab = null\r\n    export let tabValidated = false\r\n\r\n    let iconName\r\n    $: if (tabValidated){\r\n        iconName = \"checkmark-circle\"\r\n    } else {\r\n        iconName = \"ellipse-outline\" \r\n    }\r\n     \r\n    let numberColor = \"#002C6C\"\r\n    let border = \"4px top #E5E8EB\"\r\n\r\n    $: if(currentTab >= parseInt(nr)){\r\n        numberColor = \"#F26334\" \r\n        border = \"4px top #F26334\"\r\n    } else {\r\n        numberColor = \"#002C6C\"\r\n        border = \"4px top #E5E8EB\"\r\n    }\r\n    \r\n\r\n</script>\r\n\r\n<nu-block color={numberColor} size=\"50px\">\r\n    {nr}\r\n    <nu-block \r\n    color=\"#252525\" \r\n    size=\"15px\" \r\n    border={border}\r\n    padding=\"11px\">\r\n    <nu-icon name={iconName} color={numberColor}/>\r\n    {desc1}\r\n</nu-block>\r\n</nu-block>","<script>\r\n  export let prisijungimoMokestis = 0.0;\r\n  $: prisijungimoMokestisSuPVM = prisijungimoMokestis + Math.round(prisijungimoMokestis * 100 * 0.21)/100;\r\n  export let metinisMokestis = 0.0;\r\n  $: metinisMokestisSuPVM = metinisMokestis + Math.round(metinisMokestis * 100 * 0.21)/100;\r\n</script>\r\n\r\n<nu-block id=\"paneMokesciai\" border=\"#C4D7ED\">\r\n  <nu-block color=\"#F26334\" padding=\"top=48px left=49px\" size=\"32px\">\r\n    Mokesčiai\r\n  </nu-block>\r\n  <nu-grid columns=\"repeat(2, auto)\" padding=\"top=24px left=49px bottom=48px\">\r\n    \r\n      <nu-block color=\"#002C6C\" size=\"18px\"> Prisijungimo mokestis </nu-block>\r\n      <nu-card width=\"250px\">\r\n        <nu-flow>\r\n          <nu-block size=\"32px\">{prisijungimoMokestis.toLocaleString('lt-LT',{minimumFractionDigits: 2})} Eur</nu-block>\r\n          <nu-block size=\"13px\">Su PVM {prisijungimoMokestisSuPVM.toLocaleString('lt-LT',{minimumFractionDigits: 2})} Eur</nu-block\r\n          >\r\n        </nu-flow>\r\n      </nu-card>\r\n    \r\n    <nu-spacer height=\"24px\" />\r\n    <nu-spacer />\r\n    <nu-block color=\"#002C6C\" size=\"18px\"> Metinis mokestis </nu-block>\r\n    <nu-card width=\"250px\">\r\n      <nu-flow>\r\n        <nu-block size=\"32px\">{metinisMokestis.toLocaleString('lt-LT',{minimumFractionDigits: 2})} Eur</nu-block>\r\n        <nu-block size=\"13px\">Su PVM {metinisMokestisSuPVM.toLocaleString('lt-LT',{minimumFractionDigits: 2})} Eur</nu-block>\r\n      </nu-flow>\r\n    </nu-card>\r\n  </nu-grid>\r\n</nu-block>\r\n","<script>\r\n  import { Paraiska, ParaiskaErrors, calculateFees } from '../stores';\r\n  import PaneMokesciai from './PaneMokesciai.svelte';\r\n  $: isApyvartaEnabled =\r\n    $Paraiska.paslauga === 'PILNAS_SPEKTRAS' ? true : false;\r\n\r\n  function setPaslauga(paslauga) {\r\n    $Paraiska.paslauga = paslauga;\r\n    calculateFees($Paraiska);\r\n  }\r\n  function setKoduSkaicius(koduSkaicius) {\r\n    $Paraiska.reikalingas_kodu_skaicius = koduSkaicius;\r\n    calculateFees($Paraiska);\r\n  }\r\n  function setApyvarta(apyvarta) {\r\n    $Paraiska.apyvarta = apyvarta;\r\n    calculateFees($Paraiska);\r\n  }\r\n</script>\r\n\r\n<nu-grid\r\n  id=\"Tab1\"\r\n  padding=\"24px 95px\"\r\n  gap=\"30px\"\r\n  columns=\"repeat(auto-fit,444px)\"\r\n>\r\n  <nu-block id=\"panePaslaugos\" border=\"#C4D7ED\">\r\n    <nu-flow id=\"form\" padding=\"48px 49px 18px\" gap=\"24px\">\r\n      <nu-block color=\"#F26334\" size=\"32px\"> Paslaugos </nu-block>\r\n      <nu-block color=\"#002C6C\" size=\"18px\"> Pasirinkite paslaugą </nu-block>\r\n      <nu-grid display=\"inline-grid\" columns=\"auto auto\" gap=\"1x 2x\">\r\n        <nu-radiogroup\r\n          id=\"paslauga\"\r\n          flow=\"column\"\r\n          gap\r\n          value={$Paraiska.paslauga}\r\n          on:input={(event) => setPaslauga(event.detail)}\r\n        >\r\n          <nu-pane>\r\n            <nu-radio labelledby=\":next\" value=\"IKI_DESIMT_KODU\" />\r\n            <nu-label>Reikalinga iki 10 kodų</nu-label>\r\n          </nu-pane>\r\n\r\n          <nu-pane>\r\n            <nu-radio labelledby=\":next\" value=\"TIK_GLN\" />\r\n            <nu-label>Reikalingas tik GLN</nu-label>\r\n          </nu-pane>\r\n\r\n          <nu-pane>\r\n            <nu-radio labelledby=\":next\" value=\"PILNAS_SPEKTRAS\" />\r\n            <nu-label>Reikalingas pilnas paslaugų spektras</nu-label>\r\n          </nu-pane>\r\n\r\n          <nu-block color=\"hue(1)\">\r\n            {$ParaiskaErrors.paslauga}\r\n          </nu-block>\r\n        </nu-radiogroup>\r\n      </nu-grid>\r\n\r\n      <nu-field hidden={!isApyvartaEnabled}>\r\n        <nu-label for=\":next\">Numatomas registruoti kodų skaičius</nu-label>\r\n        <nu-btn\r\n          width=\"21\"\r\n          columns=\"1fr auto\"\r\n          value={$Paraiska.reikalingas_kodu_skaicius}\r\n          on:input={(event) => setKoduSkaicius(event.detail)}\r\n        >\r\n          <nu-value list />\r\n          <nu-dropdownicon />\r\n          <nu-popuplistbox>\r\n            <nu-option value=\"IKI_1000\">Iki 1000</nu-option>\r\n            <nu-option value=\"IKI_10000\">Iki 10000</nu-option>\r\n            <nu-option value=\"IKI_100000\">Iki 100000 ir daugiau</nu-option>\r\n          </nu-popuplistbox>\r\n        </nu-btn>\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.reikalingas_kodu_skaicius}\r\n        </nu-block>\r\n      </nu-field>\r\n\r\n      <nu-field hidden={!isApyvartaEnabled}>\r\n        <nu-label for=\":next\">Praėjusių metų apyvarta</nu-label>\r\n        <nu-btn\r\n          width=\"21\"\r\n          columns=\"1fr auto\"\r\n          id=\"apyvarta\"\r\n          value={$Paraiska.apyvarta}\r\n          on:input={(event) => setApyvarta(event.detail)}\r\n        >\r\n          <nu-value list />\r\n          <nu-dropdownicon />\r\n          <nu-popuplistbox>\r\n            <nu-option value=\"100\">iki 30 000 eur </nu-option>\r\n            <nu-option value=\"200\">nuo 30 000 iki 300 000 eur </nu-option>\r\n            <nu-option value=\"300\">nuo 300 000 iki 1 000 000 eur </nu-option>\r\n            <nu-option value=\"400\">nuo 1 000 000 iki 3 000 000 eur </nu-option>\r\n            <nu-option value=\"500\">nuo 3 000 000 iki 5 000 000 eur </nu-option>\r\n            <nu-option value=\"600\">\r\n              nuo 5 000 000 iki 10 000 000 eur\r\n            </nu-option>\r\n            <nu-option value=\"700\">\r\n              nuo 10 000 000 iki 15 000 000 eur\r\n            </nu-option>\r\n            <nu-option value=\"800\">\r\n              nuo 15 000 000 iki 25 000 000 eur\r\n            </nu-option>\r\n            <nu-option value=\"900\"> virš 25 000 000 eur </nu-option>\r\n          </nu-popuplistbox>\r\n        </nu-btn>\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.apyvarta}\r\n        </nu-block>\r\n      </nu-field>\r\n    </nu-flow>\r\n  </nu-block>\r\n  <PaneMokesciai\r\n    prisijungimoMokestis={$Paraiska.mokesciai.prisijungimo}\r\n    metinisMokestis={$Paraiska.mokesciai.palaikymo}\r\n  />\r\n</nu-grid>\r\n","export default\r\n[\r\n    {\"id\":1,\"name\":\"Mažmeninė prekyba\"},\r\n    {\"id\":2,\"name\":\"Didmeninė prekyba\"},\r\n    {\"id\":3,\"name\":\"Gamyba\"},\r\n    {\"id\":4,\"name\":\"Maisto produktai\"},\r\n    {\"id\":5,\"name\":\"Gėrimai\"},\r\n    {\"id\":6,\"name\":\"Buities prekės\"},\r\n    {\"id\":7,\"name\":\"Parfumerija ir kosmetika\"},\r\n    {\"id\":8,\"name\":\"Statybinės prekės\"},\r\n    {\"id\":9,\"name\":\"Maisto produktai\"},\r\n    {\"id\":10,\"name\":\"Buitinė technika\"},\r\n    {\"id\":11,\"name\":\"Medicinos prietaisai\"},\r\n    {\"id\":12,\"name\":\"Medicinos priemonės\"},\r\n    {\"id\":13,\"name\":\"Medikamentai\"},\r\n    {\"id\":14,\"name\":\"Prekės gyvūnams\"},\r\n    {\"id\":15,\"name\":\"Sodo/daržo prekės\"},\r\n    {\"id\":16,\"name\":\"Audio/video prekės\"},\r\n    {\"id\":17,\"name\":\"Drabužiai/avalynė\"},\r\n    {\"id\":18,\"name\":\"Auto/moto prekės\"},\r\n    {\"id\":19,\"name\":\"Logistikos paslaugos\"},\r\n    {\"id\":999,\"name\":\"Kita (nurodykite)\"}\r\n]","<script>\r\n  import { Paraiska, ParaiskaErrors } from '../stores';\r\n  import veiklosSritys from '../veiklosSritys';\r\n\r\n  $: isImone = $Paraiska.pareiskejo_tipas === 'IMONE' ? true : false;\r\n</script>\r\n\r\n<nu-grid\r\n  id=\"Tab2\"\r\n  padding=\"24px 95px\"\r\n  gap=\"30px\"\r\n  columns=\"repeat(auto-fit,444px)\"\r\n>\r\n  <nu-block id=\"panePareiskejas\" border=\"#C4D7ED\">\r\n    <nu-flow id=\"form\" padding=\"48px 49px 18px\" gap=\"24px\">\r\n      <nu-block color=\"#F26334\" size=\"32px\"> Pareiškėjas </nu-block>\r\n      <nu-field>\r\n        <nu-label for=\"pareiskejoTipas\"> Pareiškėjo tipas </nu-label>\r\n\r\n        <nu-btn\r\n          id=\"pareiskejoTipas\"\r\n          width=\"100%\"\r\n          columns=\"1fr auto\"\r\n          value={$Paraiska.pareiskejo_tipas}\r\n          on:input={(event) => ($Paraiska.pareiskejo_tipas = event.detail)}\r\n        >\r\n          <nu-value list />\r\n          <nu-dropdownicon />\r\n          <nu-popuplistbox>\r\n            <nu-option value=\"IMONE\"> Įmonė </nu-option>\r\n            <nu-option value=\"ASMUO\"> Fizinis asmuo </nu-option>\r\n          </nu-popuplistbox>\r\n        </nu-btn>\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.pareiskejo_tipas}\r\n        </nu-block>\r\n      </nu-field>\r\n\r\n      {#if isImone}\r\n        <nu-field>\r\n          <nu-label for=\"imonesTipas\"> Įmonės juridinis statusas </nu-label>\r\n\r\n          <nu-btn\r\n            id=\"imonesTipas\"\r\n            width=\"100%\"\r\n            columns=\"1fr auto\"\r\n            value={$Paraiska.imones_tipas}\r\n            on:input={(event) => ($Paraiska.imones_tipas = event.detail)}\r\n          >\r\n            <nu-value list />\r\n            <nu-dropdownicon />\r\n            <nu-popuplistbox>\r\n              <nu-option value=\"AB\"> Akcinė bendrovė </nu-option>\r\n              <nu-option value=\"IĮ\"> Individuali įmonė </nu-option>\r\n              <nu-option value=\"KB\"> Kooperatinė bendrovė </nu-option>\r\n              <nu-option value=\"MB\"> Mažoji bendrija </nu-option>\r\n              <nu-option value=\"PĮ\"> Personalinė įmonė </nu-option>\r\n              <nu-option value=\"SPAB\">\r\n                Specialios paskirties akcinė bendrovė\r\n              </nu-option>\r\n              <nu-option value=\"TŪB\"> Tikroji ūkinė bendrija </nu-option>\r\n              <nu-option value=\"UAB\"> Uždaroji akcinė bendrovė </nu-option>\r\n              <nu-option value=\"VšĮ\"> Viešoji įstaiga </nu-option>\r\n              <nu-option value=\"ŽŪB\"> Žemės ūkio bendrovė </nu-option>\r\n              <nu-option value=\"ŽŪK\"> Žemės ūkio kooperatyvas </nu-option>\r\n            </nu-popuplistbox>\r\n          </nu-btn>\r\n\r\n          <nu-block color=\"hue(1)\">\r\n            {$ParaiskaErrors.imones_tipas}\r\n          </nu-block>\r\n        </nu-field>\r\n\r\n        <nu-field>\r\n          <nu-label> Įmonės pavadinimas </nu-label>\r\n\r\n          <nu-input\r\n            type=\"text\"\r\n            value={$Paraiska.pavadinimas}\r\n            on:input={(event) => ($Paraiska.pavadinimas = event.detail)}\r\n          />\r\n          <nu-block color=\"hue(1)\">\r\n            {$ParaiskaErrors.pavadinimas}\r\n          </nu-block>\r\n        </nu-field>\r\n      {:else}\r\n        <nu-field>\r\n          <nu-label for=\"asmens_vardas\"> Vardas </nu-label>\r\n          <nu-input\r\n            type=\"text\"\r\n            id=\"pvmKodas\"\r\n            value={$Paraiska.asmens_vardas}\r\n            on:input={(event) => ($Paraiska.asmens_vardas = event.detail)}\r\n          />\r\n          <nu-block color=\"hue(1)\">\r\n            {$ParaiskaErrors.asmens_vardas}\r\n          </nu-block>\r\n        </nu-field>\r\n\r\n        <nu-field>\r\n          <nu-label for=\"asmens_pavarde\"> Pavardė </nu-label>\r\n          <nu-input\r\n            type=\"text\"\r\n            id=\"asmens_pavarde\"\r\n            value={$Paraiska.asmens_pavarde}\r\n            on:input={(event) => ($Paraiska.asmens_pavarde = event.detail)}\r\n          />\r\n          <nu-block color=\"hue(1)\">\r\n            {$ParaiskaErrors.asmens_pavarde}\r\n          </nu-block>\r\n        </nu-field>\r\n      {/if}\r\n\r\n      <nu-field>\r\n        <nu-label for=\"veiklosSritys\"> Veiklos sritys </nu-label>\r\n\r\n        <nu-btn\r\n          id=\"veiklosSritys\"\r\n          width=\"100%\"\r\n          columns=\"1fr auto\"\r\n          value={$Paraiska.veiklos_sritys}\r\n          on:input={(event) => ($Paraiska.veiklos_sritys = event.detail)}\r\n        >\r\n          <nu-value list />\r\n          <nu-dropdownicon />\r\n          <nu-popuplistbox multiple>\r\n            {#each veiklosSritys as item}\r\n              <nu-option value={item.id}>\r\n                {item.name}\r\n              </nu-option>\r\n            {/each}\r\n          </nu-popuplistbox>\r\n        </nu-btn>\r\n\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.veiklos_sritys}\r\n        </nu-block>\r\n\r\n        {#if $Paraiska.veiklos_sritys.length > 0 && $Paraiska.veiklos_sritys.includes(999) > 0}\r\n          <nu-input\r\n            type=\"text\"\r\n            id=\"kitos_veiklos_sritys\"\r\n            placeholder=\"kitos veiklos sritys\"\r\n            value={$Paraiska.kitos_veiklos_sritys}\r\n            on:input={(event) =>\r\n              ($Paraiska.kitos_veiklos_sritys = event.detail)}\r\n          />\r\n\r\n          <nu-block color=\"hue(1)\">\r\n            {$ParaiskaErrors.kitos_veiklos_sritys}\r\n          </nu-block>\r\n        {/if}\r\n      </nu-field>\r\n\r\n      <nu-field>\r\n        <nu-label for=\":next\"\r\n          >Ar planuojate ženklinti medicinos sektoriaus prekes?</nu-label\r\n        >\r\n        <nu-btn\r\n          width=\"100%\"\r\n          columns=\"1fr auto\"\r\n          value={$Paraiska.is_med_prekes}\r\n          on:input={(event) => ($Paraiska.is_med_prekes = event.detail)}\r\n        >\r\n          <nu-value list />\r\n          <nu-dropdownicon />\r\n          <nu-popuplistbox>\r\n            <nu-option value=\"TAIP\">Taip</nu-option>\r\n            <nu-option value=\"NE\">Ne</nu-option>\r\n          </nu-popuplistbox>\r\n        </nu-btn>\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.is_med_prekes}\r\n        </nu-block>\r\n      </nu-field>\r\n\r\n      {#if $Paraiska.is_med_prekes === 'TAIP'}\r\n        <nu-field>\r\n          <nu-label for=\":next\"\r\n            >Ar planuojate tiekti medicinos prietaisus/priemones į JAV rinką?</nu-label\r\n          >\r\n          <nu-btn\r\n            width=\"100%\"\r\n            columns=\"1fr auto\"\r\n            value={$Paraiska.is_med_prekes_jav}\r\n            on:input={(event) => ($Paraiska.is_med_prekes_jav = event.detail)}\r\n          >\r\n            <nu-value list />\r\n            <nu-dropdownicon />\r\n            <nu-popuplistbox>\r\n              <nu-option value=\"TAIP\">Taip</nu-option>\r\n              <nu-option value=\"NE\">Ne</nu-option>\r\n            </nu-popuplistbox>\r\n          </nu-btn>\r\n          <nu-block color=\"hue(1)\">\r\n            {$ParaiskaErrors.is_med_prekes_jav}\r\n          </nu-block>\r\n        </nu-field>\r\n      {/if}\r\n\r\n      {#if isImone}\r\n        <nu-field>\r\n          <nu-label for=\"imonesKodas\"> Įmonės kodas </nu-label>\r\n          <nu-input\r\n            type=\"text\"\r\n            id=\"imonesKodas\"\r\n            value={$Paraiska.imones_kodas}\r\n            on:input={(event) => ($Paraiska.imones_kodas = event.detail)}\r\n          />\r\n\r\n          <nu-block color=\"hue(1)\">\r\n            {$ParaiskaErrors.imones_kodas}\r\n          </nu-block>\r\n        </nu-field>\r\n      {:else}\r\n        <nu-field>\r\n          <nu-label for=\"asmensKodas\"> Asmens kodas </nu-label>\r\n          <nu-input\r\n            type=\"text\"\r\n            id=\"asmensKodas\"\r\n            value={$Paraiska.asmens_kodas}\r\n            on:input={(event) => ($Paraiska.asmens_kodas = event.detail)}\r\n          />\r\n\r\n          <nu-block color=\"hue(1)\">\r\n            {$ParaiskaErrors.asmens_kodas}\r\n          </nu-block>\r\n        </nu-field>\r\n      {/if}\r\n\r\n      <nu-field>\r\n        <nu-label for=\"pvmKodas\"> PVM mokėtojo kodas (jei turite) </nu-label>\r\n        <nu-input\r\n          type=\"text\"\r\n          id=\"pvmKodas\"\r\n          value={$Paraiska.pvm_kodas}\r\n          on:input={(event) => ($Paraiska.pvm_kodas = event.detail)}\r\n        />\r\n      </nu-field>\r\n    </nu-flow>\r\n  </nu-block>\r\n  <nu-block id=\"paneKontaktai\" border=\"#C4D7ED\">\r\n    <nu-flow id=\"form\" padding=\"48px 49px 18px\" gap=\"24px\">\r\n      <nu-block color=\"#F26334\" size=\"32px\">Kontaktai</nu-block>\r\n\r\n      <nu-field>\r\n        <nu-label for=\":next\"> Telefono nr. </nu-label>\r\n        <nu-input\r\n          type=\"text\"\r\n          id=\"telefonas\"\r\n          placeholder=\"pvz: +370 123 45678\"\r\n          value={$Paraiska.telefonas}\r\n          on:input={(event) => ($Paraiska.telefonas = event.detail)}\r\n        />\r\n\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.telefonas}\r\n        </nu-block>\r\n      </nu-field>\r\n\r\n      <nu-field>\r\n        <nu-label for=\":next\"> El. pašto adresas </nu-label>\r\n        <nu-input\r\n          type=\"text\"\r\n          id=\"email\"\r\n          placeholder=\"pvz: vardas@kompanija.lt\"\r\n          value={$Paraiska.email}\r\n          on:input={(event) => ($Paraiska.email = event.detail)}\r\n        />\r\n\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.email}\r\n        </nu-block>\r\n      </nu-field>\r\n\r\n      <nu-field>\r\n        <nu-label for=\":next\"> Interneto svetainės adresas </nu-label>\r\n        <nu-input\r\n          type=\"text\"\r\n          id=\"www\"\r\n          placeholder=\"pvz: www.imone.lt\"\r\n          value={$Paraiska.www}\r\n          on:input={(event) => ($Paraiska.wwww = event.detail)}\r\n        />\r\n      </nu-field>\r\n\r\n      <nu-field>\r\n        <nu-label for=\":next\"> Banko sąskaitos nr. </nu-label>\r\n        <nu-input\r\n          type=\"text\"\r\n          id=\"bankoSaskaita\"\r\n          placeholder=\"LTXX XXXX XXXX XXXX XXXX\"\r\n          value={$Paraiska.banko_saskaita}\r\n          on:input={(event) => ($Paraiska.banko_saskaita = event.detail)}\r\n        />\r\n\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.banko_saskaita}\r\n        </nu-block>\r\n      </nu-field>\r\n\r\n      <nu-field>\r\n        <nu-label for=\":next\"> Banko kodas </nu-label>\r\n        <nu-input\r\n          type=\"text\"\r\n          id=\"bankoKodas\"\r\n          placeholder=\"XXXX\"\r\n          value={$Paraiska.banko_kodas}\r\n          on:input={(event) => ($Paraiska.banko_kodas = event.detail)}\r\n        />\r\n\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.banko_kodas}\r\n        </nu-block>\r\n      </nu-field>\r\n\r\n      <nu-field>\r\n        <nu-label for=\":next\"> Banko pavadinimas </nu-label>\r\n        <nu-input\r\n          type=\"text\"\r\n          id=\"bankas\"\r\n          placeholder=\"pvz: AB Bankas\"\r\n          value={$Paraiska.bankas}\r\n          on:input={(event) => ($Paraiska.bankas = event.detail)}\r\n        />\r\n\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.bankas}\r\n        </nu-block>\r\n      </nu-field>\r\n\r\n      <nu-field>\r\n        <nu-label for=\":next\"> El. pašto adresas sąskaitoms gauti </nu-label>\r\n        <nu-input\r\n          type=\"text\"\r\n          id=\"emailSaskaitoms\"\r\n          placeholder=\"pvz: vardas@kompanija.lt\"\r\n          value={$Paraiska.email_saskaitoms}\r\n          on:input={(event) => ($Paraiska.email_saskaitoms = event.detail)}\r\n        />\r\n\r\n        <nu-block color=\"hue(1)\">\r\n          {$ParaiskaErrors.email_saskaitoms}\r\n        </nu-block>\r\n      </nu-field>\r\n    </nu-flow>\r\n  </nu-block>\r\n</nu-grid>\r\n","<script>\r\n  //import valstybes from './valstybes'\r\n  //import miestai from './miestai'\r\n\r\n  import { getContext } from 'svelte';\r\n  export let adresas = {};\r\n  export let isDisabled = false;\r\n\r\n  const AdresasErrors = {\r\n    valstybe: '',\r\n    adresas1: '',\r\n    adresas2: '',\r\n    adresas3: '',\r\n    adresas4: '',\r\n    miestas: '',\r\n    pasto_kodas: '',\r\n  };\r\n\r\n  let valstybes = getContext('valstybes');\r\n  let miestai = getContext('miestai');\r\n\r\n  //$: console.log('adresas. valstybe: ' + adresas.valstybe)\r\n  $: isLietuva = adresas.valstybe === 'LT' ? true : false;\r\n</script>\r\n\r\n<nu-field>\r\n  <nu-label for=\":next\"> Valstybė </nu-label>\r\n\r\n  <nu-btn\r\n    width=\"100%\"\r\n    columns=\"1fr auto\"\r\n    placeholder=\"Pasirinkite valstybę\"\r\n    value={adresas.valstybe}\r\n    on:input={(event) => (adresas.valstybe = event.detail)}\r\n    disabled={isDisabled}\r\n    toggle\r\n  >\r\n    <nu-value list />\r\n    <nu-dropdownicon />\r\n    <nu-popuplistbox>\r\n      {#each valstybes as item}\r\n        <nu-option value={item.ALPHA_2_CODE}>\r\n          {item.LT_SHORT_NAME}\r\n        </nu-option>\r\n      {/each}\r\n    </nu-popuplistbox>\r\n  </nu-btn>\r\n\r\n  <nu-block color=\"hue(1)\">\r\n    {AdresasErrors.valstybe}\r\n  </nu-block>\r\n</nu-field>\r\n\r\n<nu-field>\r\n  <nu-label for=\":next\">Adresas 1</nu-label>\r\n\r\n  <nu-input\r\n    type=\"text\"\r\n    value={adresas.adresas1}\r\n    on:input={(event) => (adresas.adresas1 = event.detail)}\r\n    disabled={isDisabled}\r\n  />\r\n\r\n  <nu-block color=\"hue(1)\">\r\n    {AdresasErrors.adresas1}\r\n  </nu-block>\r\n</nu-field>\r\n\r\n<nu-field>\r\n  <nu-label for=\":next\">Adresas 2</nu-label>\r\n\r\n  <nu-input\r\n    type=\"text\"\r\n    value={adresas.adresas2}\r\n    on:input={(event) => (adresas.adresas2 = event.detail)}\r\n    disabled={isDisabled}\r\n  />\r\n</nu-field>\r\n\r\n<nu-field>\r\n  <nu-label for=\":next\">Adresas 3</nu-label>\r\n\r\n  <nu-input\r\n    type=\"text\"\r\n    value={adresas.adresas3}\r\n    on:input={(event) => (adresas.adresas3 = event.detail)}\r\n    disabled={isDisabled}\r\n  />\r\n</nu-field>\r\n\r\n{#if !isLietuva}\r\n  <nu-field>\r\n    <nu-label for=\":next\">Adresas 4</nu-label>\r\n\r\n    <nu-input\r\n      type=\"text\"\r\n      value={adresas.adresas4}\r\n      on:input={(event) => (adresas.adresas4 = event.detail)}\r\n      disabled={isDisabled}\r\n    />\r\n  </nu-field>\r\n{:else}\r\n  <nu-field>\r\n    <nu-label for=\":next\">Miestas / rajonas</nu-label>\r\n\r\n    <nu-btn\r\n      width=\"100%\"\r\n      columns=\"1fr auto\"\r\n      placeholder=\"Pasirinkite miestą/rajoną\"\r\n      value={adresas.miestas}\r\n      on:input={(event) => (adresas.miestas = event.detail)}\r\n      disabled={isDisabled}\r\n    >\r\n      <nu-value list />\r\n      <nu-dropdownicon />\r\n      <nu-popuplistbox>\r\n        {#each miestai as item}\r\n          <nu-option value={item.MST_ID}>\r\n            {item.MST_Name}\r\n          </nu-option>\r\n        {/each}\r\n      </nu-popuplistbox>\r\n    </nu-btn>\r\n\r\n    <nu-block color=\"hue(1)\">\r\n      {AdresasErrors.miestas}\r\n    </nu-block>\r\n  </nu-field>\r\n{/if}\r\n\r\n<nu-field>\r\n  <nu-label for=\":next\">Pašto kodas</nu-label>\r\n  {#if isLietuva}\r\n    <nu-inputgroup fill=\"input\">\r\n      <nu-block padding>LT-</nu-block>\r\n      <nu-input\r\n        type=\"text\"\r\n        value={adresas.pasto_kodas}\r\n        on:input={(event) => (adresas.pasto_kodas = event.detail)}\r\n        disabled={isDisabled}\r\n      />\r\n    </nu-inputgroup>\r\n  {:else}\r\n    <nu-input\r\n      type=\"text\"\r\n      value={adresas.pasto_kodas}\r\n      on:input={(event) => (adresas.pasto_kodas = event.detail)}\r\n      disabled={isDisabled}\r\n    />\r\n  {/if}\r\n\r\n  <nu-block color=\"hue(1)\">\r\n    {AdresasErrors.pasto_kodas}\r\n  </nu-block>\r\n</nu-field>\r\n","<script>\r\n  import {Paraiska} from '../stores';\r\n\r\n  import Adress from './Address.svelte'\r\n</script>\r\n\r\n<nu-grid\r\n  id=\"Tab3\"\r\n  padding=\"24px 95px\"\r\n  gap=\"30px\"\r\n  columns=\"repeat(auto-fit,444px)\"\r\n>\r\n  <nu-block id=\"paneAdresasReg\" border=\"#C4D7ED\" width=\"445px\">\r\n    <nu-flow id=\"form\" padding=\"48px 49px 18px\" gap=\"24px\">\r\n      <nu-block color=\"#F26334\" size=\"32px\"\r\n        >Registracijos adresas</nu-block\r\n      >\r\n      <Adress adresas={$Paraiska.adresas_reg} isDisabled={false}></Adress>\r\n\r\n      <nu-flex gap=\"1x\" items=\"center\">\r\n        <nu-checkbox labelledby=\"label\" \r\n        checked={$Paraiska.is_adresas_vienas} \r\n        on:input={(event) => $Paraiska.is_adresas_vienas = event.detail} />\r\n        <nu-label>Adresas korespondencijai sutampa su registracijos adresu</nu-label>\r\n      </nu-flex>\r\n      \r\n    </nu-flow>\r\n  </nu-block>\r\n  <nu-block id=\"paneAdresasKor\" border=\"#C4D7ED\" width=\"445px\">\r\n    <nu-flow id=\"form\" padding=\"48px 49px 18px\" gap=\"24px\">\r\n      <nu-block color=\"#F26334\" size=\"32px\"\r\n        >Adresas korespondencijai</nu-block\r\n      >\r\n      <Adress adresas={$Paraiska.adresas_kor} isDisabled={$Paraiska.is_adresas_vienas}></Adress>\r\n    </nu-flow>\r\n  </nu-block>\r\n</nu-grid>\r\n","<script>\r\n  export let asmuo = {}\r\n  //const pav = ['Pirmas','Antras','Trečias']\r\n</script>\r\n\r\n<!--\r\n{#if asmuo = 1}\r\n<nu-label color=\"#f26334\">Atsakingas asmuo</nu-label>\r\n{:else}\r\n<nu-label color=\"#f26334\">{pav[asmuo-1]} atsakingas asmuo</nu-label>\r\n{/if}\r\n-->\r\n\r\n<nu-field>\r\n  <nu-label for=\":next\">Vardas*</nu-label>\r\n\r\n  <nu-input\r\n    type=\"text\"\r\n    id=\"vardas\"\r\n    value = {asmuo.vardas}\r\n    on:input={(event) => asmuo.vardas = event.detail}/>\r\n</nu-field>\r\n\r\n<nu-field>\r\n  <nu-label for=\":next\">Pavardė*</nu-label>\r\n\r\n  <nu-input\r\n    type=\"text\"\r\n    id=\"pavarde\"\r\n    value = {asmuo.pavarde}\r\n    on:input={(event) => asmuo.pavarde = event.detail}/>\r\n</nu-field>\r\n\r\n<nu-field>\r\n  <nu-label for=\":next\">Pareigos</nu-label>\r\n\r\n  <nu-input\r\n    type=\"text\"\r\n    id=\"pareigos\"\r\n    value = {asmuo.pareigos}\r\n    on:input={(event) => asmuo.pareigos = event.detail} />\r\n</nu-field>\r\n\r\n<nu-field>\r\n  <nu-label for=\":next\">Telefono nr.*</nu-label>\r\n\r\n  <nu-input\r\n    type=\"text\"\r\n    id=\"telefonas\"\r\n    value = {asmuo.telefonas}\r\n    on:input={(event) => asmuo.telefonas = event.detail}/>\r\n</nu-field>\r\n\r\n<nu-field>\r\n  <nu-label for=\":next\">El. pašto adresas*</nu-label>\r\n\r\n  <nu-input\r\n    type=\"text\"\r\n    id=\"email\"\r\n    value = {asmuo.email}\r\n    on:input={(event) => asmuo.email = event.detail}/>\r\n</nu-field>\r\n\r\n\r\n\r\n\r\n","<script>\r\n \r\n  import {Paraiska} from '../stores';\r\n\r\n    import Person from './Person.svelte'\r\n \r\n</script>\r\n\r\n<nu-grid id=\"Tab4\" padding=\"24px 95px\" gap=\"30px\" columns=\"repeat(auto-fit,444px)\">\r\n    <nu-block id=\"paneAsmuo1\" border=\"#C4D7ED\" width=\"445px\">\r\n        <nu-flow id=\"form\" padding=\"48px 49px 18px\" gap=\"24px\">\r\n        <nu-block color=\"#F26334\" size=\"32px\">Įmonės vadovas</nu-block>\r\n        <Person asmuo={$Paraiska.vadovas}></Person>\r\n\r\n        <nu-flex gap=\"1x\" items=\"center\">\r\n            <nu-checkbox labelledby=\"label\" \r\n            checked={$Paraiska.is_vadovas_atsakingas} \r\n            on:input={(event) => $Paraiska.is_vadovas_atsakingas = event.detail} />\r\n            <nu-label>Vadovas yra atsakingas už GS1</nu-label>\r\n          </nu-flex>\r\n    </nu-flow>\r\n    </nu-block>\r\n\r\n    <nu-block id=\"paneAsmuo2\" border=\"#C4D7ED\" width=\"445px\">\r\n        <nu-flow id=\"form\" padding=\"48px 49px 18px\" gap=\"24px\">\r\n        <nu-block color=\"#F26334\" size=\"32px\">Atsakingas už GS1 asmuo</nu-block>\r\n        <Person asmuo={$Paraiska.atsakingas_asmuo}></Person>\r\n    </nu-flow>\r\n    </nu-block>\r\n</nu-grid>","<script>\r\n  import {Paraiska} from '../stores';\r\n\r\n  import PaneMokesciai from './PaneMokesciai.svelte';\r\n</script>\r\n\r\n<nu-flow id=\"Tab5\" padding=\"24px 95px\">\r\n  <nu-block id=\"paneDokumentai\" border=\"#C4D7ED\" width=\"920px\">\r\n    <nu-flow id=\"form\" padding=\"48px 49px 18px\" gap=\"24px\">\r\n      <nu-block color=\"#F26334\" size=\"32px\">Pateiktų duomenų peržiūra</nu-block>\r\n      <nu-line />\r\n      <nu-block color=\"#002C6C\" size=\"18px\"> Registracijos duomenys </nu-block>\r\n      <nu-link>Patikrinkite pateiktos informacijos tikslumą</nu-link>\r\n\r\n      <nu-line />\r\n      <nu-block color=\"#002C6C\" size=\"18px\">\r\n        Peržiūrėti paruoštus dokumentus\r\n      </nu-block>\r\n      <nu-list type=\"none\">\r\n        <nu-listitem>\r\n          <nu-link>Sutartis</nu-link>\r\n        </nu-listitem>\r\n        <nu-listitem>\r\n          <nu-link>Sutarties priedas Nr. 2</nu-link>\r\n        </nu-listitem>\r\n        <nu-listitem>\r\n          <nu-link>Sutarties priedas Nr. 4</nu-link>\r\n        </nu-listitem>\r\n        <nu-listitem>\r\n          <nu-link>Prašymas naudotis...</nu-link>\r\n        </nu-listitem>\r\n      </nu-list>\r\n    </nu-flow>\r\n  </nu-block>\r\n  <nu-grid gap=\"30px\" columns=\"repeat(auto-fit,444px)\" padding=\"top=23px\">\r\n    <PaneMokesciai />\r\n    <nu-block id=\"panePatvirtinimas\" border=\"#C4D7ED\">\r\n      <nu-flow id=\"form\" padding=\"48px 49px 18px\" gap=\"24px\">\r\n        <nu-block color=\"#F26334\" size=\"32px\">Patvirtinimas</nu-block>\r\n\r\n        <nu-block color=\"#002C6C\" size=\"18px\">\r\n          Informacijos patvirtinimas\r\n        </nu-block>\r\n\r\n        <nu-flex gap=\"1x\" items=\"center\">\r\n          <nu-checkbox\r\n            labelledby=\"label\"\r\n            checked={$Paraiska.is_patvirtinta}\r\n            on:input={(event) => $Paraiska.is_patvirtinta = event.detail}\r\n          />\r\n          <nu-label\r\n            >Tvirtinu, kad pateikti duomenys teisingi, su sutarties ir jos\r\n            priedų sąlygomis susipažinau ir sutinku</nu-label\r\n          >\r\n        </nu-flex>\r\n\r\n        <nu-block>\r\n          Paspaudus mygtuką \"Perduoti pateiktus duomenis\", nurodytu pagrindiniu elektroniniu adresu bus išsiųsti dokumentai, kuriuos jums reikės pasirašyti ir atsiųsti mums\r\n        </nu-block>\r\n      </nu-flow>\r\n    </nu-block>\r\n  </nu-grid>\r\n</nu-flow>\r\n","<script>\n  import {\n    Paraiska,\n    persistParaiska,\n    ValidPages,\n    ParaiskaErrors,\n  } from './stores';\n  import valstybes from './valstybes';\n  import miestai from './miestai';\n\n  import { setContext } from 'svelte';\n  import TabHeader from './components/TabHeader.svelte';\n  //import PaneMokesciai from './components/PaneMokesciai.svelte';\n  import Page1 from './components/Page1.svelte';\n  import Page2 from './components/Page2.svelte';\n  import Page3 from './components/Page3.svelte';\n  import Page4 from './components/Page4.svelte';\n  import Page5 from './components/Page5.svelte';\n  import PageEnd from './components/PageEnd.svelte';\n\n  let allPages = [Page1, Page2, Page3, Page4, Page5, PageEnd];\n  let currentPage = Page1;\n  let currentTab = 1;\n  let isImone = true;\n\n  function validateEmail(email) {\n    const expression = /(?!.*\\.{2})^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i;\n\n    return expression.test(String(email).toLowerCase());\n  }\n\n  function validatePage() {\n    switch (currentPage) {\n      case Page1:\n        validatePage1();\n        break;\n      case Page2:\n        validatePage2();\n        break;\n      case Page3:\n        validatePage3();\n        break;\n      case Page4:\n        validatePage4();\n        break;\n    }\n  }\n\n  function validatePage1() {\n    $ValidPages.isValidPage1 = true;\n    // paslauga\n    if ($Paraiska.paslauga.trim().length < 1) {\n      $ValidPages.isValidPage1 = false;\n      $ParaiskaErrors.paslauga = 'Būtina pasirinkti paslaugą!';\n    } else {\n      $ParaiskaErrors.paslauga = '';\n    }\n    // reikalingas numeriu skaicius\n    if ($Paraiska.paslauga === 'PILNAS_SPEKTRAS') {\n      if ($Paraiska.reikalingas_kodu_skaicius.trim().length < 1) {\n        $ValidPages.isValidPage1 = false;\n        $ParaiskaErrors.reikalingas_kodu_skaicius = 'Pasirinkite reikalingą kodų skaičių';\n      } else {\n        $ParaiskaErrors.reikalingas_kodu_skaicius = '';\n      }\n    }\n    // apyvarta\n    if ($Paraiska.paslauga === 'PILNAS_SPEKTRAS') {\n      if ($Paraiska.apyvarta.trim().length < 1) {\n        $ValidPages.isValidPage1 = false;\n        $ParaiskaErrors.apyvarta = 'Pasirinkite praėjusių metų apyvartą';\n      } else {\n        $ParaiskaErrors.apyvarta = '';\n      }\n    }\n  }\n\n  function validatePage2() {\n    $ValidPages.isValidPage2 = true;\n    // pareiskejo tipas\n    if ($Paraiska.pareiskejo_tipas.trim().length < 1) {\n      $ValidPages.isValidPage2 = false;\n      $ParaiskaErrors.pareiskejo_tipas = 'Pasirinkite pareiškėjo tipą';\n    } else {\n      $ParaiskaErrors.pareiskejo_tipas = '';\n    }\n    // įmonė\n    if ($Paraiska.pareiskejo_tipas === 'IMONE') {\n      // imonės tipas\n      if ($Paraiska.imones_tipas.trim().length < 1) {\n        $ValidPages.isValidPage2 = false;\n        $ParaiskaErrors.imones_tipas = 'Pasirinkite įmonės juridinį statusą';\n      } else {\n        $ParaiskaErrors.imones_tipas = '';\n      }\n      // imonės pavadinimas\n      if ($Paraiska.pavadinimas.trim().length < 1) {\n        $ValidPages.isValidPage2 = false;\n        $ParaiskaErrors.pavadinimas = 'Nurodykite įmonės pavadinimą';\n      } else {\n        $ParaiskaErrors.pavadinimas = '';\n      }\n      // imonės kodas\n      if ($Paraiska.imones_kodas.trim().length < 1) {\n        $ValidPages.isValidPage2 = false;\n        $ParaiskaErrors.imones_kodas = 'Nurodykite įmonės kodą';\n      } else {\n        $ParaiskaErrors.imones_kodas = '';\n      }\n    } else {\n      // fizinis asmuo\n      // vardas\n      if ($Paraiska.asmens_vardas.trim().length < 1) {\n        $ValidPages.isValidPage2 = false;\n        $ParaiskaErrors.asmens_vardas = 'Nurodykite asmens vardą';\n      } else {\n        $ParaiskaErrors.asmens_vardas = '';\n      }\n      // pavardė\n      if ($Paraiska.asmens_pavarde.trim().length < 1) {\n        $ValidPages.isValidPage2 = false;\n        $ParaiskaErrors.asmens_pavarde = 'Nurodykite asmens pavardę';\n      } else {\n        $ParaiskaErrors.asmens_pavarde = '';\n      }\n      // asmens kodas\n      if ($Paraiska.asmens_kodas.trim().length < 1) {\n        $ValidPages.isValidPage2 = false;\n        $ParaiskaErrors.asmens_kodas = 'Nurodykite asmens kodą';\n      } else {\n        $ParaiskaErrors.asmens_kodas = '';\n      }\n    }\n    // veiklos sritys\n    if ($Paraiska.veiklos_sritys.length < 1) {\n      $ValidPages.isValidPage2 = false;\n      $ParaiskaErrors.veiklos_sritys =\n        'Pasirinkite vieną ar kelias veiklos sritis';\n    } else {\n      $ParaiskaErrors.veiklos_sritys = '';\n      // kitos veiklos sritys\n      if ($Paraiska.veiklos_sritys.includes('999') > 0) {\n        if ($Paraiska.kitos_veiklos_sritys.length < 1) {\n          $ValidPages.isValidPage2 = false;\n          $ParaiskaErrors.kitos_veiklos_sritys =\n            'Nurodykite kitas veiklos sritis, kurių nėradote sąraše';\n        } else {\n          $ParaiskaErrors.kitos_veiklos_sritys = '';\n        }\n      }\n    }\n    // med prekes\n    if ($Paraiska.is_med_prekes.length < 1) {\n      $ValidPages.isValidPage2 = false;\n      $ParaiskaErrors.is_med_prekes =\n        'Nurodykite, ar ženklintsite medicinos sektoriaus prekes';\n    } else {\n      $ParaiskaErrors.is_med_prekes = '';\n      // kitos veiklos sritys\n      if ($Paraiska.is_med_prekes === 'TAIP') {\n        if ($Paraiska.is_med_prekes_jav.length < 1) {\n          $ValidPages.isValidPage2 = false;\n          $ParaiskaErrors.is_med_prekes_jav =\n            'Nurodykite, ar tieksite medicinos prietaisus/priemones į JAV rinką';\n        } else {\n          $ParaiskaErrors.is_med_prekes_jav = '';\n        }\n      }\n    }\n    // kontaktai\n    // telefonas\n    if ($Paraiska.telefonas.trim().length < 1) {\n      $ValidPages.isValidPage2 = false;\n      $ParaiskaErrors.telefonas = 'Nurodykite kontaktinį telefoną';\n    } else {\n      $ParaiskaErrors.telefonas = '';\n    }\n    // email\n    if ($Paraiska.email.trim().length < 1) {\n      $ValidPages.isValidPage2 = false;\n      $ParaiskaErrors.email = 'Nurodykite pagrindinį el. pašto adresą';\n    } else {\n      if (!validateEmail($Paraiska.email)) {\n        $ValidPages.isValidPage2 = false;\n        $ParaiskaErrors.email = 'Neteisingas el. pašto adreso formatas';\n      } else {\n        $ParaiskaErrors.email = '';\n      }\n    }\n    // bankas\n    // sąskaita\n    if ($Paraiska.banko_saskaita.trim().length < 1) {\n      $ValidPages.isValidPage2 = false;\n      $ParaiskaErrors.banko_saskaita = 'Nurodykite banko sąskaitą';\n    } else {\n      $ParaiskaErrors.banko_saskaita = '';\n    }\n    // kodas\n    if ($Paraiska.banko_kodas.trim().length < 1) {\n      $ValidPages.isValidPage2 = false;\n      $ParaiskaErrors.banko_kodas = 'Nurodykite banko kodą';\n    } else {\n      $ParaiskaErrors.banko_kodas = '';\n    }\n    // pavadinimas\n    if ($Paraiska.bankas.trim().length < 1) {\n      $ValidPages.isValidPage2 = false;\n      $ParaiskaErrors.bankas = 'Nurodykite banko pavadinimą';\n    } else {\n      $ParaiskaErrors.bankas = '';\n    }\n    // email saskaitoms\n    if (\n      $Paraiska.email_saskaitoms.trim().length > 0 &&\n      !validateEmail($Paraiska.email_saskaitoms)\n    ) {\n      $ValidPages.isValidPage2 = false;\n      $ParaiskaErrors.email_saskaitoms =\n        'Neteisingas el. pašto adreso formatas';\n    } else {\n      $ParaiskaErrors.email_saskaitoms = '';\n    }\n  }\n\n  function validatePage3() {\n    $ValidPages.isValidPage3 = true;\n  }\n\n  function validatePage4() {\n    $ValidPages.isValidPage4 = true;\n  }\n\n  setContext('valstybes', valstybes);\n  setContext('miestai', miestai);\n  setContext('validatePage', validatePage);\n\n  $: {\n    isImone = $Paraiska.pareiskejo_tipas == 'IMONE' ? true : false;\n    if (isImone) {\n      allPages = [Page1, Page2, Page3, Page4, Page5, PageEnd];\n    } else {\n      allPages = [Page1, Page2, Page3, Page5, PageEnd];\n    }\n    setCurrentTab();\n  }\n\n  // $: {\n  //   switch ($Paraiska.paslauga) {\n  //     case 'IKI_DESIMT_KODU':\n  //       $Paraiska.reikalingas_kodu_skaicius = 'IKI_10';\n  //       break;\n  //     case 'TIK_GLN':\n  //       $Paraiska.reikalingas_kodu_skaicius = 'TIK_GLN';\n  //       break;\n  //     // case 'PILNAS_SPEKTRAS':\n  //     //   $Paraiska.reikalingas_kodu_skaicius = 'IKI_100000';\n  //     //   break;\n  //   }\n  // }\n\n  function setCurrentTab() {\n    switch (currentPage) {\n      case Page1:\n        currentTab = 1;\n        break;\n      case Page2:\n        currentTab = 2;\n        break;\n      case Page3:\n        currentTab = 3;\n        break;\n      case Page4:\n        currentTab = 4;\n        break;\n      case Page5:\n        currentTab = 5;\n        break;\n      default:\n        0;\n    }\n  }\n\n  function goNext() {\n    // validate page\n    validatePage();\n\n    switch (currentPage) {\n      case Page1:\n        if (!$ValidPages.isValidPage1) {\n          return;\n        }\n        break;\n      case Page2:\n        if (!$ValidPages.isValidPage2) {\n          return;\n        }\n        break;\n      case Page3:\n        if (!$ValidPages.isValidPage3) {\n          return;\n        }\n        break;\n      case Page4:\n        if (!$ValidPages.isValidPage4) {\n          return;\n        }\n        break;\n    }\n\n    // go to next page\n    let nextPage = allPages[allPages.indexOf(currentPage) + 1];\n    if (nextPage) {\n      currentPage = nextPage;\n      setCurrentTab();\n    } else {\n      //save(data)\n      //window.close()\n    }\n  }\n\n  function goPrevious() {\n    let prevPage = allPages[allPages.indexOf(currentPage) - 1];\n    if (prevPage) {\n      currentPage = prevPage;\n      setCurrentTab();\n    } else {\n      //save(data)\n      //window.close()\n    }\n  }\n\n  function isValidParaiska(errLst) {\n    return true;\n  }\n\n  function finish() {\n    window.location.replace('https://www.gs1lt.org/');\n  }\n\n  function doSubmit() {\n    const errLst = {\n      errors: [],\n    };\n\n    if (!isValidParaiska(errLst)) {\n      // show error message\n      alert('validacijos klaida');\n      return;\n    }\n\n    persistParaiska($Paraiska, errLst);\n    if (errLst.length > 0) {\n      //show error message\n      alert('duomenų perdavimo klaida\\n' + errLst.errors.toString());\n      return;\n    }\n\n    goNext();\n  }\n</script>\n\n<nu-root font=\"'Gotham SSm A', 'Gotham SSm B'\">\n  <nu-props />\n  <nu-theme id=\"gs1-theme\" hue=\"#002C6C\" />\n  <nu-flex padding=\"32px\" content=\"stretch center\">\n    <nu-block border=\"#C4D7ED\" width=\"1110px\">\n      <nu-block color=\"#F26334\" padding=\"72px 95px 79px\" size=\"40px\">\n        Naujo GS1 naudotojo registracija\n      </nu-block>\n      {#if currentPage !== PageEnd}\n        {#if isImone}\n          <nu-grid\n            columns=\"2pr 2pr 2pr 2pr 2pr\"\n            padding=\"0px 95px\"\n            width=\"1110px\"\n          >\n            <TabHeader\n              nr=\"01\"\n              desc1=\"Paslaugos\"\n              {currentTab}\n              tabValidated={$ValidPages.isValidPage1}\n            />\n            <TabHeader\n              nr=\"02\"\n              desc1=\"Pareiškėjas\"\n              {currentTab}\n              tabValidated={$ValidPages.isValidPage2}\n            />\n            <TabHeader\n              nr=\"03\"\n              desc1=\"Adresas\"\n              {currentTab}\n              tabValidated={$ValidPages.isValidPage3}\n            />\n            <TabHeader\n              nr=\"04\"\n              desc1=\"Atsakingi asmenys\"\n              {currentTab}\n              tabValidated={$ValidPages.isValidPage4}\n            />\n            <TabHeader\n              nr=\"05\"\n              desc1=\"Patvirtinimas\"\n              {currentTab}\n              tabValidated={false}\n            />\n          </nu-grid>\n        {:else}\n          <nu-grid columns=\"2pr 2pr 2pr 2pr\" padding=\"0px 95px\" width=\"1110px\">\n            <TabHeader\n              nr=\"01\"\n              desc1=\"Paslaugos\"\n              {currentTab}\n              tabValidated={$ValidPages.isValidPage1}\n            />\n            <TabHeader\n              nr=\"02\"\n              desc1=\"Pareiškėjas\"\n              {currentTab}\n              tabValidated={$ValidPages.isValidPage2}\n            />\n            <TabHeader\n              nr=\"03\"\n              desc1=\"Adresas\"\n              {currentTab}\n              tabValidated={$ValidPages.isValidPage3}\n            />\n            <TabHeader\n              nr=\"04\"\n              desc1=\"Patvirtinimas\"\n              {currentTab}\n              tabValidated={false}\n            />\n          </nu-grid>\n        {/if}\n      {/if}\n\n      <nu-flow>\n        {#each allPages as page}\n          {#if currentPage === page}\n            <svelte:component this={page} />\n          {/if}\n        {/each}\n\n        <nu-flex padding=\"0px 95px 48px\" content=\"space-between\">\n          {#if currentPage !== Page1 && currentPage !== PageEnd}\n            <nu-btn id=\"btnPrevious\" on:click={goPrevious}>\n              <nu-icon name=\"arrow-back-outline\" />\n              Grįžti\n            </nu-btn>\n          {/if}\n          {#if currentPage !== PageEnd}\n            {#if currentPage === Page5}\n              <nu-btn\n                color=\"white\"\n                fill=\"#F26334\"\n                id=\"btnSubmit\"\n                on:click={doSubmit}\n                disabled={!$Paraiska.is_patvirtinta}\n              >\n                <nu-icon name=\"checkmark-outline\" />\n                Perduoti pateiktus duomenis\n              </nu-btn>\n            {:else}\n              <nu-btn id=\"btnNext\" on:click={goNext}>\n                Tęsti\n                <nu-icon name=\"arrow-forward-outline\" />\n              </nu-btn>\n            {/if}\n          {/if}\n          {#if currentPage === PageEnd}\n            <nu-btn id=\"btnEnd\" on:click={finish}>\n              Baigti\n              <nu-icon name=\"log-out-outline\" />\n            </nu-btn>\n          {/if}\n        </nu-flex>\n      </nu-flow>\n    </nu-block>\n  </nu-flex>\n</nu-root>\n\n<style>\n</style>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\t\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","set_store_value","ret","value","set","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","set_custom_element_data","prop","attribute","removeAttribute","getAttribute","setAttribute","attr","set_data","wholeText","current_component","set_current_component","get_current_component","Error","setContext","key","context","getContext","get","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","Map","skip_bound","ready","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","type","index","indexOf","splice","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","s","invalidate","subscriber","KODU_SKAICIUS","APYVARTA_CODE","PRISIJUNGIMO","PALAIKYMO","ValidPages","isValidPage1","isValidPage2","isValidPage3","isValidPage4","Paraiska","paslauga","reikalingas_kodu_skaicius","apyvarta","pareiskejo_tipas","imones_tipas","pavadinimas","asmens_vardas","asmens_pavarde","asmens_kodas","veiklos_sritys","kitos_veiklos_sritys","is_med_prekes","is_med_prekes_jav","imones_kodas","pvm_kodas","telefonas","email","www","banko_saskaita","banko_kodas","bankas","email_saskaitoms","adresas_reg","valstybe","adresas1","adresas2","adresas3","adresas4","miestas","pasto_kodas","is_adresas_vienas","adresas_kor","vadovas","vardas","pavarde","pareigos","is_vadovas_atsakingas","atsakingas_asmuo","is_patvirtinta","mokesciai","prisijungimo","prisijungimo_pvm","palaikymo","palaikymo_pvm","ParaiskaErrors","ParaiskaDTO","_entityName","id","reikalingasKoduSkaicius","asmuoImone","imonesTipas","imonesPavadinimas","asmensVardas","asmensPavarde","asmensKodas","veiklosSritysKodai","kitosVeiklosSritys","isMedPrekes","imonesKodas","pvmKodas","bankoSaskaita","bankoKodas","emailSaskaitoms","adrRegLine1","adrRegLine2","adrRegLine3","adrRegLine4","adrRegPastoKodas","adrRegMiestas","adrRegValstybe","isAdresasVienas","adrKorLine1","adrKorLine2","adrKorLine3","adrKorLine4","adrKorPastoKodas","adrKorMiestas","adrKorValstybe","vadovasVardas","vadovasPavarde","vadovasPareigos","vadovasTelefonas","vadovasEmail","isVadovasAtsakingas","atsAsmuoVardas","atsAsmuoPavarde","atsAsmuoPareigos","atsAsmuoTelefonas","atsAsmuoEmail","paraiskosBusena","shortEntityDTO","calculateFees","paraiska","koduSkaicius","x","kainos","find","e","Math","round","persistParaiska","errLst","myHeaders","Headers","veiklosSritys","toString","includes","fillDto","raw","JSON","stringify","fetch","method","headers","body","redirect","response","result","console","log","catch","error","errors","ALPHA_2_CODE","LT_SHORT_NAME","MST_ID","MST_Name","iconName","nr","desc1","currentTab","tabValidated","numberColor","border","parseInt","toLocaleString","minimumFractionDigits","prisijungimoMokestis","metinisMokestis","prisijungimoMokestisSuPVM","metinisMokestisSuPVM","setPaslauga","$Paraiska","setKoduSkaicius","setApyvarta","isApyvartaEnabled","detail","isImone","wwww","adresas","isDisabled","valstybes","miestai","isLietuva","asmuo","Page5","finish","PageEnd","Page1","validateEmail","test","String","toLowerCase","window","location","replace","allPages","Page2","Page3","Page4","currentPage","validatePage","$ValidPages","trim","$ParaiskaErrors","validatePage1","validatePage2","setCurrentTab","goNext","nextPage","prevPage","alert"],"mappings":"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"}